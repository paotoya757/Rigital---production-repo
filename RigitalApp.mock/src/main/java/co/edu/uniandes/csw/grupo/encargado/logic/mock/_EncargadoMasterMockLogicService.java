/* ========================================================================
 * Copyright 2014 grupo
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 grupo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.grupo.encargado.logic.mock;
import java.util.ArrayList;
import java.util.List;

import co.edu.uniandes.csw.grupo.encargado.logic.dto.EncargadoDTO;
import co.edu.uniandes.csw.grupo.encargado.logic.api.IEncargadoLogicService;
import co.edu.uniandes.csw.grupo.encargado.master.logic.api._IEncargadoMasterLogicService;
import co.edu.uniandes.csw.grupo.encargado.master.logic.dto.EncargadoMasterDTO;
import co.edu.uniandes.csw.grupo.softwaresalas.logic.api.ISoftwareSalasLogicService;
import co.edu.uniandes.csw.grupo.wiki.logic.api.IWikiLogicService;
import co.edu.uniandes.csw.grupo.unidaddered.logic.api.IUnidadDeRedLogicService;
import co.edu.uniandes.csw.grupo.contenedorweb.logic.api.IContenedorWebLogicService;
import co.edu.uniandes.csw.grupo.maquinavirtual.logic.api.IMaquinaVirtualLogicService;
import co.edu.uniandes.csw.grupo.sqldev.logic.api.ISQLDevLogicService;
import co.edu.uniandes.csw.grupo.mysql.logic.api.IMySQLLogicService;
import co.edu.uniandes.csw.grupo.repositorio.logic.api.IRepositorioLogicService;
import co.edu.uniandes.csw.grupo.softwaresalas.logic.dto.SoftwareSalasDTO;
import co.edu.uniandes.csw.grupo.wiki.logic.dto.WikiDTO;
import co.edu.uniandes.csw.grupo.unidaddered.logic.dto.UnidadDeRedDTO;
import co.edu.uniandes.csw.grupo.contenedorweb.logic.dto.ContenedorWebDTO;
import co.edu.uniandes.csw.grupo.maquinavirtual.logic.dto.MaquinaVirtualDTO;
import co.edu.uniandes.csw.grupo.sqldev.logic.dto.SQLDevDTO;
import co.edu.uniandes.csw.grupo.mysql.logic.dto.MySQLDTO;
import co.edu.uniandes.csw.grupo.repositorio.logic.dto.RepositorioDTO;
import javax.inject.Inject;


public abstract class _EncargadoMasterMockLogicService implements _IEncargadoMasterLogicService {

    protected static ArrayList<EncargadoMasterDTO> encargadoMasterDtosList = new ArrayList<EncargadoMasterDTO>() ;
    @Inject
    protected ISoftwareSalasLogicService softwareSalasPersistance;
    @Inject
    protected IWikiLogicService wikiPersistance;
    @Inject
    protected IUnidadDeRedLogicService unidadDeRedPersistance;
    @Inject
    protected IContenedorWebLogicService contenedorWebPersistance;
    @Inject
    protected IMaquinaVirtualLogicService maquinaVirtualPersistance;
    @Inject
    protected ISQLDevLogicService sQLDevPersistance;
    @Inject
    protected IMySQLLogicService mySQLPersistance;
    @Inject
    protected IRepositorioLogicService repositorioPersistance;
    @Inject
    protected IEncargadoLogicService encargadoPersistance;

    public EncargadoMasterDTO createMasterEncargado(EncargadoMasterDTO encargado) {

        encargadoPersistance.createEncargado(encargado.getEncargadoEntity());
        for (WikiDTO dto : encargado.getCreatewiki()) {
            wikiPersistance.createWiki(dto);
        }
        for (MaquinaVirtualDTO dto : encargado.getCreatemaquinaVirtual()) {
            maquinaVirtualPersistance.createMaquinaVirtual(dto);
        }
        for (UnidadDeRedDTO dto : encargado.getCreateunidadDeRed()) {
            unidadDeRedPersistance.createUnidadDeRed(dto);
        }
        for (RepositorioDTO dto : encargado.getCreaterepositorio()) {
            repositorioPersistance.createRepositorio(dto);
        }
        for (ContenedorWebDTO dto : encargado.getCreatecontenedorWeb()) {
            contenedorWebPersistance.createContenedorWeb(dto);
        }
        for (SoftwareSalasDTO dto : encargado.getCreatesoftwareSalas()) {
            softwareSalasPersistance.createSoftwareSalas(dto);
        }
        for (SQLDevDTO dto : encargado.getCreatesQLDev()) {
            sQLDevPersistance.createSQLDev(dto);
        }
        for (MySQLDTO dto : encargado.getCreatemySQL()) {
            mySQLPersistance.createMySQL(dto);
        }
        encargadoMasterDtosList.add(encargado);
        return encargado;
    }

    public EncargadoMasterDTO getMasterEncargado(Long id) {
        for (EncargadoMasterDTO encargadoMasterDTO : encargadoMasterDtosList) {
            if (encargadoMasterDTO.getEncargadoEntity().getId() == id) {
                return encargadoMasterDTO;
            }
        }

        return null;
    }

    public void deleteMasterEncargado(Long id) {
        for (EncargadoMasterDTO encargadoMasterDTO : encargadoMasterDtosList) {
            if (encargadoMasterDTO.getEncargadoEntity().getId() == id) {

                for (WikiDTO dto : encargadoMasterDTO.getCreatewiki()) {
                    wikiPersistance.deleteWiki(dto.getId());
                }
                encargadoPersistance.deleteEncargado(encargadoMasterDTO.getId());
                encargadoMasterDtosList.remove(encargadoMasterDTO);
                for (MaquinaVirtualDTO dto : encargadoMasterDTO.getCreatemaquinaVirtual()) {
                    maquinaVirtualPersistance.deleteMaquinaVirtual(dto.getId());
                }
                encargadoPersistance.deleteEncargado(encargadoMasterDTO.getId());
                encargadoMasterDtosList.remove(encargadoMasterDTO);
                for (UnidadDeRedDTO dto : encargadoMasterDTO.getCreateunidadDeRed()) {
                    unidadDeRedPersistance.deleteUnidadDeRed(dto.getId());
                }
                encargadoPersistance.deleteEncargado(encargadoMasterDTO.getId());
                encargadoMasterDtosList.remove(encargadoMasterDTO);
                for (RepositorioDTO dto : encargadoMasterDTO.getCreaterepositorio()) {
                    repositorioPersistance.deleteRepositorio(dto.getId());
                }
                encargadoPersistance.deleteEncargado(encargadoMasterDTO.getId());
                encargadoMasterDtosList.remove(encargadoMasterDTO);
                for (ContenedorWebDTO dto : encargadoMasterDTO.getCreatecontenedorWeb()) {
                    contenedorWebPersistance.deleteContenedorWeb(dto.getId());
                }
                encargadoPersistance.deleteEncargado(encargadoMasterDTO.getId());
                encargadoMasterDtosList.remove(encargadoMasterDTO);
                for (SoftwareSalasDTO dto : encargadoMasterDTO.getCreatesoftwareSalas()) {
                    softwareSalasPersistance.deleteSoftwareSalas(dto.getId());
                }
                encargadoPersistance.deleteEncargado(encargadoMasterDTO.getId());
                encargadoMasterDtosList.remove(encargadoMasterDTO);
                for (SQLDevDTO dto : encargadoMasterDTO.getCreatesQLDev()) {
                    sQLDevPersistance.deleteSQLDev(dto.getId());
                }
                encargadoPersistance.deleteEncargado(encargadoMasterDTO.getId());
                encargadoMasterDtosList.remove(encargadoMasterDTO);
                for (MySQLDTO dto : encargadoMasterDTO.getCreatemySQL()) {
                    mySQLPersistance.deleteMySQL(dto.getId());
                }
                encargadoPersistance.deleteEncargado(encargadoMasterDTO.getId());
                encargadoMasterDtosList.remove(encargadoMasterDTO);
            }
        }

    }

    public void updateMasterEncargado(EncargadoMasterDTO encargado) {

        // update Wiki
        if (encargado.getUpdatewiki() != null) {
            for (WikiDTO dto : encargado.getUpdatewiki()) {
                wikiPersistance.updateWiki(dto);
            }
        }
        // persist new Wiki
        if (encargado.getCreatewiki() != null) {
            for (WikiDTO dto : encargado.getCreatewiki()) {
                WikiDTO persistedWikiDTO = wikiPersistance.createWiki(dto);
                dto = persistedWikiDTO;
            }
        }
        // delete Wiki
        if (encargado.getDeletewiki() != null) {
            for (WikiDTO dto : encargado.getDeletewiki()) {

                wikiPersistance.deleteWiki(dto.getId());
            }
        }
        // update MaquinaVirtual
        if (encargado.getUpdatemaquinaVirtual() != null) {
            for (MaquinaVirtualDTO dto : encargado.getUpdatemaquinaVirtual()) {
                maquinaVirtualPersistance.updateMaquinaVirtual(dto);
            }
        }
        // persist new MaquinaVirtual
        if (encargado.getCreatemaquinaVirtual() != null) {
            for (MaquinaVirtualDTO dto : encargado.getCreatemaquinaVirtual()) {
                MaquinaVirtualDTO persistedMaquinaVirtualDTO = maquinaVirtualPersistance.createMaquinaVirtual(dto);
                dto = persistedMaquinaVirtualDTO;
            }
        }
        // delete MaquinaVirtual
        if (encargado.getDeletemaquinaVirtual() != null) {
            for (MaquinaVirtualDTO dto : encargado.getDeletemaquinaVirtual()) {

                maquinaVirtualPersistance.deleteMaquinaVirtual(dto.getId());
            }
        }
        // update UnidadDeRed
        if (encargado.getUpdateunidadDeRed() != null) {
            for (UnidadDeRedDTO dto : encargado.getUpdateunidadDeRed()) {
                unidadDeRedPersistance.updateUnidadDeRed(dto);
            }
        }
        // persist new UnidadDeRed
        if (encargado.getCreateunidadDeRed() != null) {
            for (UnidadDeRedDTO dto : encargado.getCreateunidadDeRed()) {
                UnidadDeRedDTO persistedUnidadDeRedDTO = unidadDeRedPersistance.createUnidadDeRed(dto);
                dto = persistedUnidadDeRedDTO;
            }
        }
        // delete UnidadDeRed
        if (encargado.getDeleteunidadDeRed() != null) {
            for (UnidadDeRedDTO dto : encargado.getDeleteunidadDeRed()) {

                unidadDeRedPersistance.deleteUnidadDeRed(dto.getId());
            }
        }
        // update Repositorio
        if (encargado.getUpdaterepositorio() != null) {
            for (RepositorioDTO dto : encargado.getUpdaterepositorio()) {
                repositorioPersistance.updateRepositorio(dto);
            }
        }
        // persist new Repositorio
        if (encargado.getCreaterepositorio() != null) {
            for (RepositorioDTO dto : encargado.getCreaterepositorio()) {
                RepositorioDTO persistedRepositorioDTO = repositorioPersistance.createRepositorio(dto);
                dto = persistedRepositorioDTO;
            }
        }
        // delete Repositorio
        if (encargado.getDeleterepositorio() != null) {
            for (RepositorioDTO dto : encargado.getDeleterepositorio()) {

                repositorioPersistance.deleteRepositorio(dto.getId());
            }
        }
        // update ContenedorWeb
        if (encargado.getUpdatecontenedorWeb() != null) {
            for (ContenedorWebDTO dto : encargado.getUpdatecontenedorWeb()) {
                contenedorWebPersistance.updateContenedorWeb(dto);
            }
        }
        // persist new ContenedorWeb
        if (encargado.getCreatecontenedorWeb() != null) {
            for (ContenedorWebDTO dto : encargado.getCreatecontenedorWeb()) {
                ContenedorWebDTO persistedContenedorWebDTO = contenedorWebPersistance.createContenedorWeb(dto);
                dto = persistedContenedorWebDTO;
            }
        }
        // delete ContenedorWeb
        if (encargado.getDeletecontenedorWeb() != null) {
            for (ContenedorWebDTO dto : encargado.getDeletecontenedorWeb()) {

                contenedorWebPersistance.deleteContenedorWeb(dto.getId());
            }
        }
        // update SoftwareSalas
        if (encargado.getUpdatesoftwareSalas() != null) {
            for (SoftwareSalasDTO dto : encargado.getUpdatesoftwareSalas()) {
                softwareSalasPersistance.updateSoftwareSalas(dto);
            }
        }
        // persist new SoftwareSalas
        if (encargado.getCreatesoftwareSalas() != null) {
            for (SoftwareSalasDTO dto : encargado.getCreatesoftwareSalas()) {
                SoftwareSalasDTO persistedSoftwareSalasDTO = softwareSalasPersistance.createSoftwareSalas(dto);
                dto = persistedSoftwareSalasDTO;
            }
        }
        // delete SoftwareSalas
        if (encargado.getDeletesoftwareSalas() != null) {
            for (SoftwareSalasDTO dto : encargado.getDeletesoftwareSalas()) {

                softwareSalasPersistance.deleteSoftwareSalas(dto.getId());
            }
        }
        // update SQLDev
        if (encargado.getUpdatesQLDev() != null) {
            for (SQLDevDTO dto : encargado.getUpdatesQLDev()) {
                sQLDevPersistance.updateSQLDev(dto);
            }
        }
        // persist new SQLDev
        if (encargado.getCreatesQLDev() != null) {
            for (SQLDevDTO dto : encargado.getCreatesQLDev()) {
                SQLDevDTO persistedSQLDevDTO = sQLDevPersistance.createSQLDev(dto);
                dto = persistedSQLDevDTO;
            }
        }
        // delete SQLDev
        if (encargado.getDeletesQLDev() != null) {
            for (SQLDevDTO dto : encargado.getDeletesQLDev()) {

                sQLDevPersistance.deleteSQLDev(dto.getId());
            }
        }
        // update MySQL
        if (encargado.getUpdatemySQL() != null) {
            for (MySQLDTO dto : encargado.getUpdatemySQL()) {
                mySQLPersistance.updateMySQL(dto);
            }
        }
        // persist new MySQL
        if (encargado.getCreatemySQL() != null) {
            for (MySQLDTO dto : encargado.getCreatemySQL()) {
                MySQLDTO persistedMySQLDTO = mySQLPersistance.createMySQL(dto);
                dto = persistedMySQLDTO;
            }
        }
        // delete MySQL
        if (encargado.getDeletemySQL() != null) {
            for (MySQLDTO dto : encargado.getDeletemySQL()) {

                mySQLPersistance.deleteMySQL(dto.getId());
            }
        }
    }
}