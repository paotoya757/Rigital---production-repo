/* ========================================================================
 * Copyright 2014 grupo
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 grupo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.grupo.encargado.master.persistence;
import co.edu.uniandes.csw.grupo.wiki.logic.dto.WikiDTO;
import co.edu.uniandes.csw.grupo.encargado.master.persistence.entity.EncargadowikiEntity;
import co.edu.uniandes.csw.grupo.wiki.persistence.converter.WikiConverter;
import co.edu.uniandes.csw.grupo.maquinavirtual.logic.dto.MaquinaVirtualDTO;
import co.edu.uniandes.csw.grupo.encargado.master.persistence.entity.EncargadomaquinaVirtualEntity;
import co.edu.uniandes.csw.grupo.maquinavirtual.persistence.converter.MaquinaVirtualConverter;
import co.edu.uniandes.csw.grupo.unidaddered.logic.dto.UnidadDeRedDTO;
import co.edu.uniandes.csw.grupo.encargado.master.persistence.entity.EncargadounidadDeRedEntity;
import co.edu.uniandes.csw.grupo.unidaddered.persistence.converter.UnidadDeRedConverter;
import co.edu.uniandes.csw.grupo.repositorio.logic.dto.RepositorioDTO;
import co.edu.uniandes.csw.grupo.encargado.master.persistence.entity.EncargadorepositorioEntity;
import co.edu.uniandes.csw.grupo.repositorio.persistence.converter.RepositorioConverter;
import co.edu.uniandes.csw.grupo.contenedorweb.logic.dto.ContenedorWebDTO;
import co.edu.uniandes.csw.grupo.encargado.master.persistence.entity.EncargadocontenedorWebEntity;
import co.edu.uniandes.csw.grupo.contenedorweb.persistence.converter.ContenedorWebConverter;
import co.edu.uniandes.csw.grupo.softwaresalas.logic.dto.SoftwareSalasDTO;
import co.edu.uniandes.csw.grupo.encargado.master.persistence.entity.EncargadosoftwareSalasEntity;
import co.edu.uniandes.csw.grupo.softwaresalas.persistence.converter.SoftwareSalasConverter;
import co.edu.uniandes.csw.grupo.sqldev.logic.dto.SQLDevDTO;
import co.edu.uniandes.csw.grupo.encargado.master.persistence.entity.EncargadosQLDevEntity;
import co.edu.uniandes.csw.grupo.sqldev.persistence.converter.SQLDevConverter;
import co.edu.uniandes.csw.grupo.mysql.logic.dto.MySQLDTO;
import co.edu.uniandes.csw.grupo.encargado.master.persistence.entity.EncargadomySQLEntity;
import co.edu.uniandes.csw.grupo.mysql.persistence.converter.MySQLConverter;
import co.edu.uniandes.csw.grupo.encargado.logic.dto.EncargadoDTO;
import co.edu.uniandes.csw.grupo.encargado.master.logic.dto.EncargadoMasterDTO;
import co.edu.uniandes.csw.grupo.encargado.master.persistence.api._IEncargadoMasterPersistence;
import co.edu.uniandes.csw.grupo.encargado.persistence.api.IEncargadoPersistence;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

public class _EncargadoMasterPersistence implements _IEncargadoMasterPersistence {

  	@PersistenceContext(unitName="RigitalAppPU")
 
    protected EntityManager entityManager;
    
    @Inject
    protected IEncargadoPersistence encargadoPersistence;  

    public EncargadoMasterDTO getEncargado(Long encargadoId) {
        EncargadoMasterDTO encargadoMasterDTO = new EncargadoMasterDTO();
        EncargadoDTO encargado = encargadoPersistence.getEncargado(encargadoId);
        encargadoMasterDTO.setEncargadoEntity(encargado);
        encargadoMasterDTO.setListwiki(getEncargadowikiEntityList(encargadoId));
        encargadoMasterDTO.setListmaquinaVirtual(getEncargadomaquinaVirtualEntityList(encargadoId));
        encargadoMasterDTO.setListunidadDeRed(getEncargadounidadDeRedEntityList(encargadoId));
        encargadoMasterDTO.setListrepositorio(getEncargadorepositorioEntityList(encargadoId));
        encargadoMasterDTO.setListcontenedorWeb(getEncargadocontenedorWebEntityList(encargadoId));
        encargadoMasterDTO.setListsoftwareSalas(getEncargadosoftwareSalasEntityList(encargadoId));
        encargadoMasterDTO.setListsQLDev(getEncargadosQLDevEntityList(encargadoId));
        encargadoMasterDTO.setListmySQL(getEncargadomySQLEntityList(encargadoId));
        return encargadoMasterDTO;
    }

    public EncargadowikiEntity createEncargadowikiEntity(EncargadowikiEntity entity) {
        entityManager.persist(entity);
        return entity;
    }

    public void deleteEncargadowikiEntity(Long encargadoId, Long wikiId) {
        Query q = entityManager.createNamedQuery("EncargadowikiEntity.deleteEncargadowikiEntity");
        q.setParameter("encargadoId", encargadoId);
        q.setParameter("wikiId", wikiId);
        q.executeUpdate();
    }

    public List<WikiDTO> getEncargadowikiEntityList(Long encargadoId) {
        ArrayList<WikiDTO> resp = new ArrayList<WikiDTO>();
        Query q = entityManager.createNamedQuery("EncargadowikiEntity.getByMasterId");
        q.setParameter("encargadoId",encargadoId);
        List<EncargadowikiEntity> qResult =  q.getResultList();
        for (EncargadowikiEntity entity : qResult) { 
            if(entity.getWikiIdEntity()==null){
                entityManager.refresh(entity);
            }
            resp.add(WikiConverter.entity2PersistenceDTO(entity.getWikiIdEntity()));
        }
        return resp;
    }
    public EncargadomaquinaVirtualEntity createEncargadomaquinaVirtualEntity(EncargadomaquinaVirtualEntity entity) {
        entityManager.persist(entity);
        return entity;
    }

    public void deleteEncargadomaquinaVirtualEntity(Long encargadoId, Long maquinaVirtualId) {
        Query q = entityManager.createNamedQuery("EncargadomaquinaVirtualEntity.deleteEncargadomaquinaVirtualEntity");
        q.setParameter("encargadoId", encargadoId);
        q.setParameter("maquinaVirtualId", maquinaVirtualId);
        q.executeUpdate();
    }

    public List<MaquinaVirtualDTO> getEncargadomaquinaVirtualEntityList(Long encargadoId) {
        ArrayList<MaquinaVirtualDTO> resp = new ArrayList<MaquinaVirtualDTO>();
        Query q = entityManager.createNamedQuery("EncargadomaquinaVirtualEntity.getByMasterId");
        q.setParameter("encargadoId",encargadoId);
        List<EncargadomaquinaVirtualEntity> qResult =  q.getResultList();
        for (EncargadomaquinaVirtualEntity entity : qResult) { 
            if(entity.getMaquinaVirtualIdEntity()==null){
                entityManager.refresh(entity);
            }
            resp.add(MaquinaVirtualConverter.entity2PersistenceDTO(entity.getMaquinaVirtualIdEntity()));
        }
        return resp;
    }
    public EncargadounidadDeRedEntity createEncargadounidadDeRedEntity(EncargadounidadDeRedEntity entity) {
        entityManager.persist(entity);
        return entity;
    }

    public void deleteEncargadounidadDeRedEntity(Long encargadoId, Long unidadDeRedId) {
        Query q = entityManager.createNamedQuery("EncargadounidadDeRedEntity.deleteEncargadounidadDeRedEntity");
        q.setParameter("encargadoId", encargadoId);
        q.setParameter("unidadDeRedId", unidadDeRedId);
        q.executeUpdate();
    }

    public List<UnidadDeRedDTO> getEncargadounidadDeRedEntityList(Long encargadoId) {
        ArrayList<UnidadDeRedDTO> resp = new ArrayList<UnidadDeRedDTO>();
        Query q = entityManager.createNamedQuery("EncargadounidadDeRedEntity.getByMasterId");
        q.setParameter("encargadoId",encargadoId);
        List<EncargadounidadDeRedEntity> qResult =  q.getResultList();
        for (EncargadounidadDeRedEntity entity : qResult) { 
            if(entity.getUnidadDeRedIdEntity()==null){
                entityManager.refresh(entity);
            }
            resp.add(UnidadDeRedConverter.entity2PersistenceDTO(entity.getUnidadDeRedIdEntity()));
        }
        return resp;
    }
    public EncargadorepositorioEntity createEncargadorepositorioEntity(EncargadorepositorioEntity entity) {
        entityManager.persist(entity);
        return entity;
    }

    public void deleteEncargadorepositorioEntity(Long encargadoId, Long repositorioId) {
        Query q = entityManager.createNamedQuery("EncargadorepositorioEntity.deleteEncargadorepositorioEntity");
        q.setParameter("encargadoId", encargadoId);
        q.setParameter("repositorioId", repositorioId);
        q.executeUpdate();
    }

    public List<RepositorioDTO> getEncargadorepositorioEntityList(Long encargadoId) {
        ArrayList<RepositorioDTO> resp = new ArrayList<RepositorioDTO>();
        Query q = entityManager.createNamedQuery("EncargadorepositorioEntity.getByMasterId");
        q.setParameter("encargadoId",encargadoId);
        List<EncargadorepositorioEntity> qResult =  q.getResultList();
        for (EncargadorepositorioEntity entity : qResult) { 
            if(entity.getRepositorioIdEntity()==null){
                entityManager.refresh(entity);
            }
            resp.add(RepositorioConverter.entity2PersistenceDTO(entity.getRepositorioIdEntity()));
        }
        return resp;
    }
    public EncargadocontenedorWebEntity createEncargadocontenedorWebEntity(EncargadocontenedorWebEntity entity) {
        entityManager.persist(entity);
        return entity;
    }

    public void deleteEncargadocontenedorWebEntity(Long encargadoId, Long contenedorWebId) {
        Query q = entityManager.createNamedQuery("EncargadocontenedorWebEntity.deleteEncargadocontenedorWebEntity");
        q.setParameter("encargadoId", encargadoId);
        q.setParameter("contenedorWebId", contenedorWebId);
        q.executeUpdate();
    }

    public List<ContenedorWebDTO> getEncargadocontenedorWebEntityList(Long encargadoId) {
        ArrayList<ContenedorWebDTO> resp = new ArrayList<ContenedorWebDTO>();
        Query q = entityManager.createNamedQuery("EncargadocontenedorWebEntity.getByMasterId");
        q.setParameter("encargadoId",encargadoId);
        List<EncargadocontenedorWebEntity> qResult =  q.getResultList();
        for (EncargadocontenedorWebEntity entity : qResult) { 
            if(entity.getContenedorWebIdEntity()==null){
                entityManager.refresh(entity);
            }
            resp.add(ContenedorWebConverter.entity2PersistenceDTO(entity.getContenedorWebIdEntity()));
        }
        return resp;
    }
    public EncargadosoftwareSalasEntity createEncargadosoftwareSalasEntity(EncargadosoftwareSalasEntity entity) {
        entityManager.persist(entity);
        return entity;
    }

    public void deleteEncargadosoftwareSalasEntity(Long encargadoId, Long softwareSalasId) {
        Query q = entityManager.createNamedQuery("EncargadosoftwareSalasEntity.deleteEncargadosoftwareSalasEntity");
        q.setParameter("encargadoId", encargadoId);
        q.setParameter("softwareSalasId", softwareSalasId);
        q.executeUpdate();
    }

    public List<SoftwareSalasDTO> getEncargadosoftwareSalasEntityList(Long encargadoId) {
        ArrayList<SoftwareSalasDTO> resp = new ArrayList<SoftwareSalasDTO>();
        Query q = entityManager.createNamedQuery("EncargadosoftwareSalasEntity.getByMasterId");
        q.setParameter("encargadoId",encargadoId);
        List<EncargadosoftwareSalasEntity> qResult =  q.getResultList();
        for (EncargadosoftwareSalasEntity entity : qResult) { 
            if(entity.getSoftwareSalasIdEntity()==null){
                entityManager.refresh(entity);
            }
            resp.add(SoftwareSalasConverter.entity2PersistenceDTO(entity.getSoftwareSalasIdEntity()));
        }
        return resp;
    }
    public EncargadosQLDevEntity createEncargadosQLDevEntity(EncargadosQLDevEntity entity) {
        entityManager.persist(entity);
        return entity;
    }

    public void deleteEncargadosQLDevEntity(Long encargadoId, Long sQLDevId) {
        Query q = entityManager.createNamedQuery("EncargadosQLDevEntity.deleteEncargadosQLDevEntity");
        q.setParameter("encargadoId", encargadoId);
        q.setParameter("sQLDevId", sQLDevId);
        q.executeUpdate();
    }

    public List<SQLDevDTO> getEncargadosQLDevEntityList(Long encargadoId) {
        ArrayList<SQLDevDTO> resp = new ArrayList<SQLDevDTO>();
        Query q = entityManager.createNamedQuery("EncargadosQLDevEntity.getByMasterId");
        q.setParameter("encargadoId",encargadoId);
        List<EncargadosQLDevEntity> qResult =  q.getResultList();
        for (EncargadosQLDevEntity entity : qResult) { 
            if(entity.getSQLDevIdEntity()==null){
                entityManager.refresh(entity);
            }
            resp.add(SQLDevConverter.entity2PersistenceDTO(entity.getSQLDevIdEntity()));
        }
        return resp;
    }
    public EncargadomySQLEntity createEncargadomySQLEntity(EncargadomySQLEntity entity) {
        entityManager.persist(entity);
        return entity;
    }

    public void deleteEncargadomySQLEntity(Long encargadoId, Long mySQLId) {
        Query q = entityManager.createNamedQuery("EncargadomySQLEntity.deleteEncargadomySQLEntity");
        q.setParameter("encargadoId", encargadoId);
        q.setParameter("mySQLId", mySQLId);
        q.executeUpdate();
    }

    public List<MySQLDTO> getEncargadomySQLEntityList(Long encargadoId) {
        ArrayList<MySQLDTO> resp = new ArrayList<MySQLDTO>();
        Query q = entityManager.createNamedQuery("EncargadomySQLEntity.getByMasterId");
        q.setParameter("encargadoId",encargadoId);
        List<EncargadomySQLEntity> qResult =  q.getResultList();
        for (EncargadomySQLEntity entity : qResult) { 
            if(entity.getMySQLIdEntity()==null){
                entityManager.refresh(entity);
            }
            resp.add(MySQLConverter.entity2PersistenceDTO(entity.getMySQLIdEntity()));
        }
        return resp;
    }

}
