/* ========================================================================
 * Copyright 2014 grupo
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 grupo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.grupo.repositorio.master.logic.ejb;

import co.edu.uniandes.csw.grupo.estudiante.logic.dto.EstudianteDTO;
import co.edu.uniandes.csw.grupo.estudiante.persistence.api.IEstudiantePersistence;
import co.edu.uniandes.csw.grupo.problema.logic.dto.ProblemaDTO;
import co.edu.uniandes.csw.grupo.problema.persistence.api.IProblemaPersistence;
import co.edu.uniandes.csw.grupo.repositorio.logic.dto.RepositorioDTO;
import co.edu.uniandes.csw.grupo.repositorio.master.logic.api._IRepositorioMasterLogicService;
import co.edu.uniandes.csw.grupo.repositorio.master.logic.dto.RepositorioMasterDTO;
import co.edu.uniandes.csw.grupo.repositorio.master.persistence.api.IRepositorioMasterPersistence;
import co.edu.uniandes.csw.grupo.repositorio.master.persistence.entity.RepositoriousuariosQueAccedenEntity;
import co.edu.uniandes.csw.grupo.repositorio.master.persistence.entity.RepositorioproblemasEntity;
import co.edu.uniandes.csw.grupo.repositorio.persistence.api.IRepositorioPersistence;
import javax.inject.Inject;

public abstract class _RepositorioMasterLogicService implements _IRepositorioMasterLogicService {

    @Inject
    protected IRepositorioPersistence repositorioPersistance;
    @Inject
    protected IRepositorioMasterPersistence repositorioMasterPersistance;
    @Inject
    protected IProblemaPersistence problemaPersistance;
    @Inject
    protected IEstudiantePersistence estudiantePersistance;

    public RepositorioMasterDTO createMasterRepositorio(RepositorioMasterDTO repositorio) {
        RepositorioDTO persistedRepositorioDTO = repositorioPersistance.createRepositorio(repositorio.getRepositorioEntity());
        if (repositorio.getCreateusuariosQueAcceden() != null) {
            for (EstudianteDTO estudianteDTO : repositorio.getCreateusuariosQueAcceden()) {
                EstudianteDTO createdEstudianteDTO = estudiantePersistance.createEstudiante(estudianteDTO);
                RepositoriousuariosQueAccedenEntity repositorioEstudianteEntity = new RepositoriousuariosQueAccedenEntity(persistedRepositorioDTO.getId(), createdEstudianteDTO.getId());
                repositorioMasterPersistance.createRepositoriousuariosQueAccedenEntity(repositorioEstudianteEntity);
            }
        }
        if (repositorio.getCreateproblemas() != null) {
            for (ProblemaDTO problemaDTO : repositorio.getCreateproblemas()) {
                ProblemaDTO createdProblemaDTO = problemaPersistance.createProblema(problemaDTO);
                RepositorioproblemasEntity repositorioProblemaEntity = new RepositorioproblemasEntity(persistedRepositorioDTO.getId(), createdProblemaDTO.getId());
                repositorioMasterPersistance.createRepositorioproblemasEntity(repositorioProblemaEntity);
            }
        }
        // update estudiante
        if (repositorio.getUpdateusuariosQueAcceden() != null) {
            for (EstudianteDTO estudianteDTO : repositorio.getUpdateusuariosQueAcceden()) {
                estudiantePersistance.updateEstudiante(estudianteDTO);
                RepositoriousuariosQueAccedenEntity repositorioEstudianteEntity = new RepositoriousuariosQueAccedenEntity(persistedRepositorioDTO.getId(), estudianteDTO.getId());
                repositorioMasterPersistance.createRepositoriousuariosQueAccedenEntity(repositorioEstudianteEntity);
            }
        }
        // update problema
        if (repositorio.getUpdateproblemas() != null) {
            for (ProblemaDTO problemaDTO : repositorio.getUpdateproblemas()) {
                problemaPersistance.updateProblema(problemaDTO);
                RepositorioproblemasEntity repositorioProblemaEntity = new RepositorioproblemasEntity(persistedRepositorioDTO.getId(), problemaDTO.getId());
                repositorioMasterPersistance.createRepositorioproblemasEntity(repositorioProblemaEntity);
            }
        }
        return repositorio;
    }

    public RepositorioMasterDTO getMasterRepositorio(Long id) {
        return repositorioMasterPersistance.getRepositorio(id);
    }

    public void deleteMasterRepositorio(Long id) {
        repositorioPersistance.deleteRepositorio(id);
    }

    public void updateMasterRepositorio(RepositorioMasterDTO repositorio) {
        repositorioPersistance.updateRepositorio(repositorio.getRepositorioEntity());

        //---- FOR RELATIONSHIP
        // delete estudiante
        if (repositorio.getDeleteusuariosQueAcceden() != null) {
            for (EstudianteDTO estudianteDTO : repositorio.getDeleteusuariosQueAcceden()) {
                repositorioMasterPersistance.deleteRepositoriousuariosQueAccedenEntity(repositorio.getRepositorioEntity().getId(), estudianteDTO.getId());
            }
        }
        // persist new estudiante
        if (repositorio.getCreateusuariosQueAcceden() != null) {
            for (EstudianteDTO estudianteDTO : repositorio.getCreateusuariosQueAcceden()) {
                RepositoriousuariosQueAccedenEntity repositorioEstudianteEntity = new RepositoriousuariosQueAccedenEntity(repositorio.getRepositorioEntity().getId(), estudianteDTO.getId());
                repositorioMasterPersistance.createRepositoriousuariosQueAccedenEntity(repositorioEstudianteEntity);
            }
        }
        // update estudiante
        if (repositorio.getUpdateusuariosQueAcceden() != null) {
            for (EstudianteDTO estudianteDTO : repositorio.getUpdateusuariosQueAcceden()) {
                repositorioMasterPersistance.deleteRepositoriousuariosQueAccedenEntity(repositorio.getRepositorioEntity().getId(), estudianteDTO.getId());
                estudiantePersistance.updateEstudiante(estudianteDTO);
                RepositoriousuariosQueAccedenEntity repositorioEstudianteEntity = new RepositoriousuariosQueAccedenEntity(repositorio.getId(), estudianteDTO.getId());
                repositorioMasterPersistance.createRepositoriousuariosQueAccedenEntity(repositorioEstudianteEntity);
                
            }
        }
        // delete problema
        if (repositorio.getDeleteproblemas() != null) {
            for (ProblemaDTO problemaDTO : repositorio.getDeleteproblemas()) {
                repositorioMasterPersistance.deleteRepositorioproblemasEntity(repositorio.getRepositorioEntity().getId(), problemaDTO.getId());
            }
        }
        // persist new problema
        if (repositorio.getCreateproblemas() != null) {
            for (ProblemaDTO problemaDTO : repositorio.getCreateproblemas()) {
                RepositorioproblemasEntity repositorioProblemaEntity = new RepositorioproblemasEntity(repositorio.getRepositorioEntity().getId(), problemaDTO.getId());
                repositorioMasterPersistance.createRepositorioproblemasEntity(repositorioProblemaEntity);
            }
        }
        // update problema
        if (repositorio.getUpdateproblemas() != null) {
            for (ProblemaDTO problemaDTO : repositorio.getUpdateproblemas()) {
                repositorioMasterPersistance.deleteRepositorioproblemasEntity(repositorio.getRepositorioEntity().getId(), problemaDTO.getId());
                problemaPersistance.updateProblema(problemaDTO);
                RepositorioproblemasEntity repositorioProblemaEntity = new RepositorioproblemasEntity(repositorio.getId(), problemaDTO.getId());
                repositorioMasterPersistance.createRepositorioproblemasEntity(repositorioProblemaEntity);
                
            }
        }
    }
}
