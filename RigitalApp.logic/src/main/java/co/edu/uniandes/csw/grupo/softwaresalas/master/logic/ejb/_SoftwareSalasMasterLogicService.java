/* ========================================================================
 * Copyright 2014 grupo
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 grupo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.grupo.softwaresalas.master.logic.ejb;

import co.edu.uniandes.csw.grupo.problema.logic.dto.ProblemaDTO;
import co.edu.uniandes.csw.grupo.problema.persistence.api.IProblemaPersistence;
import co.edu.uniandes.csw.grupo.softwaresalas.logic.dto.SoftwareSalasDTO;
import co.edu.uniandes.csw.grupo.softwaresalas.master.logic.api._ISoftwareSalasMasterLogicService;
import co.edu.uniandes.csw.grupo.softwaresalas.master.logic.dto.SoftwareSalasMasterDTO;
import co.edu.uniandes.csw.grupo.softwaresalas.master.persistence.api.ISoftwareSalasMasterPersistence;
import co.edu.uniandes.csw.grupo.softwaresalas.master.persistence.entity.SoftwareSalasproblemaEntity;
import co.edu.uniandes.csw.grupo.softwaresalas.persistence.api.ISoftwareSalasPersistence;
import javax.inject.Inject;

public abstract class _SoftwareSalasMasterLogicService implements _ISoftwareSalasMasterLogicService {

    @Inject
    protected ISoftwareSalasPersistence softwaresalasPersistance;
    @Inject
    protected ISoftwareSalasMasterPersistence softwaresalasMasterPersistance;
    @Inject
    protected IProblemaPersistence problemaPersistance;

    public SoftwareSalasMasterDTO createMasterSoftwareSalas(SoftwareSalasMasterDTO softwaresalas) {
        SoftwareSalasDTO persistedSoftwareSalasDTO = softwaresalasPersistance.createSoftwareSalas(softwaresalas.getSoftwareSalasEntity());
        if (softwaresalas.getCreateproblema() != null) {
            for (ProblemaDTO problemaDTO : softwaresalas.getCreateproblema()) {
                ProblemaDTO createdProblemaDTO = problemaPersistance.createProblema(problemaDTO);
                SoftwareSalasproblemaEntity softwaresalasProblemaEntity = new SoftwareSalasproblemaEntity(persistedSoftwareSalasDTO.getId(), createdProblemaDTO.getId());
                softwaresalasMasterPersistance.createSoftwareSalasproblemaEntity(softwaresalasProblemaEntity);
            }
        }
        // update problema
        if (softwaresalas.getUpdateproblema() != null) {
            for (ProblemaDTO problemaDTO : softwaresalas.getUpdateproblema()) {
                problemaPersistance.updateProblema(problemaDTO);
                SoftwareSalasproblemaEntity softwaresalasProblemaEntity = new SoftwareSalasproblemaEntity(persistedSoftwareSalasDTO.getId(), problemaDTO.getId());
                softwaresalasMasterPersistance.createSoftwareSalasproblemaEntity(softwaresalasProblemaEntity);
            }
        }
        return softwaresalas;
    }

    public SoftwareSalasMasterDTO getMasterSoftwareSalas(Long id) {
        return softwaresalasMasterPersistance.getSoftwareSalas(id);
    }

    public void deleteMasterSoftwareSalas(Long id) {
        softwaresalasPersistance.deleteSoftwareSalas(id);
    }

    public void updateMasterSoftwareSalas(SoftwareSalasMasterDTO softwaresalas) {
        softwaresalasPersistance.updateSoftwareSalas(softwaresalas.getSoftwareSalasEntity());

        //---- FOR RELATIONSHIP
        // delete problema
        if (softwaresalas.getDeleteproblema() != null) {
            for (ProblemaDTO problemaDTO : softwaresalas.getDeleteproblema()) {
                softwaresalasMasterPersistance.deleteSoftwareSalasproblemaEntity(softwaresalas.getSoftwareSalasEntity().getId(), problemaDTO.getId());
            }
        }
        // persist new problema
        if (softwaresalas.getCreateproblema() != null) {
            for (ProblemaDTO problemaDTO : softwaresalas.getCreateproblema()) {
                SoftwareSalasproblemaEntity softwaresalasProblemaEntity = new SoftwareSalasproblemaEntity(softwaresalas.getSoftwareSalasEntity().getId(), problemaDTO.getId());
                softwaresalasMasterPersistance.createSoftwareSalasproblemaEntity(softwaresalasProblemaEntity);
            }
        }
        // update problema
        if (softwaresalas.getUpdateproblema() != null) {
            for (ProblemaDTO problemaDTO : softwaresalas.getUpdateproblema()) {
                softwaresalasMasterPersistance.deleteSoftwareSalasproblemaEntity(softwaresalas.getSoftwareSalasEntity().getId(), problemaDTO.getId());
                problemaPersistance.updateProblema(problemaDTO);
                SoftwareSalasproblemaEntity softwaresalasProblemaEntity = new SoftwareSalasproblemaEntity(softwaresalas.getId(), problemaDTO.getId());
                softwaresalasMasterPersistance.createSoftwareSalasproblemaEntity(softwaresalasProblemaEntity);
                
            }
        }
    }
}
