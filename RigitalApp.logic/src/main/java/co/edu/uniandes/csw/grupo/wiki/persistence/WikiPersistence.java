/* ========================================================================
 * Copyright 2014 grupo
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 grupo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.grupo.wiki.persistence;

import co.edu.uniandes.csw.grupo.wiki.logic.dto.WikiPageDTO;
import co.edu.uniandes.csw.grupo.wiki.persistence.api.IWikiPersistence;
import co.edu.uniandes.csw.grupo.wiki.persistence.converter.WikiConverter;
import java.util.Date;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.enterprise.inject.Default;
import javax.persistence.Query;

@Default
@Stateless 
@LocalBean
public class WikiPersistence extends _WikiPersistence  implements IWikiPersistence {

    @SuppressWarnings("unchecked")
    public WikiPageDTO getWikisByParameters(String servidorHost, String rutaServidor, String name, String descripcion, String proposito, String caracteristicas, String encargadoId, String fechaCreacion1, String fechaCreacion2, String estaDestruido) 
    {
        
        Query count = entityManager.createQuery("select count(u) from WikiEntity u");
        Long regCount = 0L;
        regCount = Long.parseLong(count.getSingleResult().toString());
        
        boolean destruido = false;
        
        if(estaDestruido.equals("1"))
            destruido = true;
        
        String sql = "SELECT u FROM WikiEntity u WHERE";
        if(!servidorHost.isEmpty())
            sql += " AND u.SERVIDOR_HOST like :servidorHost";
        if(!rutaServidor.isEmpty())
            sql += " AND u.RUTASERVIDOR like :rutaServidor";
        if(!name.isEmpty())
            sql += " AND u.name like :name";
        if(!descripcion.isEmpty())
            sql  += " AND u.descripcion like :descripcion";
        if(!proposito.isEmpty())
            sql += " AND u.proposito like :proposito";
        if(!caracteristicas.isEmpty())
            sql += " AND u.caracteristicas like :caracteristicas";
        if(!encargadoId.isEmpty())
            sql += " AND  u.encargadoId like :encargadoId";
        if(!fechaCreacion1.isEmpty() && !fechaCreacion2.isEmpty())
            sql += " AND u.fechaCreacion BETWEEN :fechaCreacion1 and :fechaCreacion2";
        if(!estaDestruido.isEmpty())
            sql += " AND u.destruido = :estaDestruido";
        
        // Se limpia la sentencia sql
        
        System.out.println(sql);
        System.out.println(servidorHost);
        System.out.println(rutaServidor);
        System.out.println(name);
        System.out.println(descripcion);
        System.out.println(proposito);
        System.out.println(caracteristicas);
        System.out.println(encargadoId);
        System.out.println(fechaCreacion1);
        System.out.println(fechaCreacion2);
        System.out.println(estaDestruido);
        
        if(sql.endsWith("WHERE"))
            sql = sql.replace("WHERE", "");
        if(sql.contains("WHERE AND"))
            sql = sql.replace("WHERE AND", "WHERE");
        
        System.out.println(sql);
        
        Query q = entityManager.createQuery(sql);
        
        if(!servidorHost.isEmpty())
            q.setParameter("servidorHost", "%"+servidorHost+"%");
            
        if(!rutaServidor.isEmpty())
            q.setParameter("rutaServidor", "%"+rutaServidor+"%");
            
        if(!name.isEmpty())
            q.setParameter("name", "%"+name+"%");
            
        if(!descripcion.isEmpty())
            q.setParameter("descripcion", "%"+descripcion+"%");

        if(!proposito.isEmpty())
            q.setParameter("proposito", "%"+proposito+"%");
            
        if(!caracteristicas.isEmpty())
            q.setParameter("caracteristicas", "%"+caracteristicas+"%");
            
        if(!encargadoId.isEmpty())
            q.setParameter("encargadoId", "%"+encargadoId+"%");
            
        if(!fechaCreacion1.isEmpty() && !fechaCreacion2.isEmpty())
        {
            String[] a1 = fechaCreacion1.split("-");
            String[] a2 = fechaCreacion2.split("-");
            
            Date fecha1 = new Date(Integer.parseInt(a1[0])-1900, Integer.parseInt(a1[1]),Integer.parseInt(a1[2]));
            Date fecha2 = new Date(Integer.parseInt(a2[0])-1900, Integer.parseInt(a2[1]),Integer.parseInt(a2[2]));
            
            q.setParameter("fechaCreacion1", fecha1);
            q.setParameter("fechaCreacion2", fecha2);            
        }
            
        if(!estaDestruido.isEmpty())
            q.setParameter("estaDestruido",  destruido);
        
        
        
        WikiPageDTO response = new WikiPageDTO();
        response.setTotalRecords(regCount);
        response.setRecords(WikiConverter.entity2PersistenceDTOList(q.getResultList()));
        return response;
        
            
    }
}