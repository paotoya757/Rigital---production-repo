/* ========================================================================
 * Copyright 2014 grupo
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 grupo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.grupo.paginaweb.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.grupo.paginaweb.logic.dto.PaginaWebPageDTO;
import co.edu.uniandes.csw.grupo.paginaweb.logic.dto.PaginaWebDTO;
import co.edu.uniandes.csw.grupo.paginaweb.logic.api.IPaginaWebLogicService;
import co.edu.uniandes.csw.grupo.paginaweb.persistence.PaginaWebPersistence;
import co.edu.uniandes.csw.grupo.paginaweb.persistence.api.IPaginaWebPersistence;
import co.edu.uniandes.csw.grupo.paginaweb.persistence.entity.PaginaWebEntity;
import co.edu.uniandes.csw.grupo.paginaweb.persistence.converter.PaginaWebConverter;
import static co.edu.uniandes.csw.grupo.util._TestUtil.*;

@RunWith(Arquillian.class)
public class PaginaWebLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(PaginaWebLogicService.class.getPackage())
				.addPackage(IPaginaWebLogicService.class.getPackage())
				.addPackage(PaginaWebPersistence.class.getPackage())
				.addPackage(PaginaWebEntity.class.getPackage())
				.addPackage(IPaginaWebPersistence.class.getPackage())
                .addPackage(PaginaWebDTO.class.getPackage())
                .addPackage(PaginaWebConverter.class.getPackage())
                .addPackage(PaginaWebEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IPaginaWebLogicService paginaWebLogicService;
	
	@Inject
	private IPaginaWebPersistence paginaWebPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<PaginaWebDTO> dtos=paginaWebPersistence.getPaginaWebs();
		for(PaginaWebDTO dto:dtos){
			paginaWebPersistence.deletePaginaWeb(dto.getId());
		}
	}

	private List<PaginaWebDTO> data=new ArrayList<PaginaWebDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			PaginaWebDTO pdto=new PaginaWebDTO();
			pdto.setFormato(generateRandom(String.class));
			pdto.setUltimaFechaModificacion(generateRandomDate());
			pdto.setUrl(generateRandom(String.class));
			pdto.setAlias(generateRandom(String.class));
			pdto.setName(generateRandom(String.class));
			pdto.setDescripcion(generateRandom(String.class));
			pdto.setProposito(generateRandom(String.class));
			pdto.setFechaCreacion(generateRandomDate());
			pdto.setDestruido(generateRandom(Boolean.class));
			pdto.setCaracteristicas(generateRandom(String.class));
			pdto.setCmsId(generateRandom(Long.class));
			pdto.setEncargadoId(generateRandom(Long.class));
			pdto=paginaWebPersistence.createPaginaWeb(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createPaginaWebTest(){
		PaginaWebDTO ldto=new PaginaWebDTO();
		ldto.setFormato(generateRandom(String.class));
		ldto.setUltimaFechaModificacion(generateRandomDate());
		ldto.setUrl(generateRandom(String.class));
		ldto.setAlias(generateRandom(String.class));
		ldto.setName(generateRandom(String.class));
		ldto.setDescripcion(generateRandom(String.class));
		ldto.setProposito(generateRandom(String.class));
		ldto.setFechaCreacion(generateRandomDate());
		ldto.setDestruido(generateRandom(Boolean.class));
		ldto.setCaracteristicas(generateRandom(String.class));
		ldto.setCmsId(generateRandom(Long.class));
		ldto.setEncargadoId(generateRandom(Long.class));
		
		
		PaginaWebDTO result=paginaWebLogicService.createPaginaWeb(ldto);
		
		Assert.assertNotNull(result);
		
		PaginaWebDTO pdto=paginaWebPersistence.getPaginaWeb(result.getId());
		
		Assert.assertEquals(ldto.getFormato(), pdto.getFormato());	
		Assert.assertEquals(ldto.getUltimaFechaModificacion(), pdto.getUltimaFechaModificacion());	
		Assert.assertEquals(ldto.getUrl(), pdto.getUrl());	
		Assert.assertEquals(ldto.getAlias(), pdto.getAlias());	
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getDescripcion(), pdto.getDescripcion());	
		Assert.assertEquals(ldto.getProposito(), pdto.getProposito());	
		Assert.assertEquals(ldto.getFechaCreacion(), pdto.getFechaCreacion());	
		Assert.assertEquals(ldto.getDestruido(), pdto.getDestruido());	
		Assert.assertEquals(ldto.getCaracteristicas(), pdto.getCaracteristicas());	
		Assert.assertEquals(ldto.getCmsId(), pdto.getCmsId());	
		Assert.assertEquals(ldto.getEncargadoId(), pdto.getEncargadoId());	
	}
	
	@Test
	public void getPaginaWebsTest(){
		List<PaginaWebDTO> list=paginaWebLogicService.getPaginaWebs();
		Assert.assertEquals(list.size(), data.size());
        for(PaginaWebDTO ldto:list){
        	boolean found=false;
            for(PaginaWebDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getPaginaWebTest(){
		PaginaWebDTO pdto=data.get(0);
		PaginaWebDTO ldto=paginaWebLogicService.getPaginaWeb(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getFormato(), ldto.getFormato());
		Assert.assertEquals(pdto.getUltimaFechaModificacion(), ldto.getUltimaFechaModificacion());
		Assert.assertEquals(pdto.getUrl(), ldto.getUrl());
		Assert.assertEquals(pdto.getAlias(), ldto.getAlias());
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getDescripcion(), ldto.getDescripcion());
		Assert.assertEquals(pdto.getProposito(), ldto.getProposito());
		Assert.assertEquals(pdto.getFechaCreacion(), ldto.getFechaCreacion());
		Assert.assertEquals(pdto.getDestruido(), ldto.getDestruido());
		Assert.assertEquals(pdto.getCaracteristicas(), ldto.getCaracteristicas());
		Assert.assertEquals(pdto.getCmsId(), ldto.getCmsId());
		Assert.assertEquals(pdto.getEncargadoId(), ldto.getEncargadoId());
        
	}
	
	@Test
	public void deletePaginaWebTest(){
		PaginaWebDTO pdto=data.get(0);
		paginaWebLogicService.deletePaginaWeb(pdto.getId());
        PaginaWebDTO deleted=paginaWebPersistence.getPaginaWeb(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updatePaginaWebTest(){
		PaginaWebDTO pdto=data.get(0);
		
		PaginaWebDTO ldto=new PaginaWebDTO();
		ldto.setId(pdto.getId());
		ldto.setFormato(generateRandom(String.class));
		ldto.setUltimaFechaModificacion(generateRandomDate());
		ldto.setUrl(generateRandom(String.class));
		ldto.setAlias(generateRandom(String.class));
		ldto.setName(generateRandom(String.class));
		ldto.setDescripcion(generateRandom(String.class));
		ldto.setProposito(generateRandom(String.class));
		ldto.setFechaCreacion(generateRandomDate());
		ldto.setDestruido(generateRandom(Boolean.class));
		ldto.setCaracteristicas(generateRandom(String.class));
		ldto.setCmsId(generateRandom(Long.class));
		ldto.setEncargadoId(generateRandom(Long.class));
		
		
		paginaWebLogicService.updatePaginaWeb(ldto);
		
		
		PaginaWebDTO resp=paginaWebPersistence.getPaginaWeb(pdto.getId());
		
		Assert.assertEquals(ldto.getFormato(), resp.getFormato());	
		Assert.assertEquals(ldto.getUltimaFechaModificacion(), resp.getUltimaFechaModificacion());	
		Assert.assertEquals(ldto.getUrl(), resp.getUrl());	
		Assert.assertEquals(ldto.getAlias(), resp.getAlias());	
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getDescripcion(), resp.getDescripcion());	
		Assert.assertEquals(ldto.getProposito(), resp.getProposito());	
		Assert.assertEquals(ldto.getFechaCreacion(), resp.getFechaCreacion());	
		Assert.assertEquals(ldto.getDestruido(), resp.getDestruido());	
		Assert.assertEquals(ldto.getCaracteristicas(), resp.getCaracteristicas());	
		Assert.assertEquals(ldto.getCmsId(), resp.getCmsId());	
		Assert.assertEquals(ldto.getEncargadoId(), resp.getEncargadoId());	
	}
	
	@Test
	public void getPaginaWebPaginationTest(){
		
		PaginaWebPageDTO dto1=paginaWebLogicService.getPaginaWebs(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		PaginaWebPageDTO dto2=paginaWebLogicService.getPaginaWebs(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(PaginaWebDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(PaginaWebDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(PaginaWebDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(PaginaWebDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        PaginaWebPageDTO dto3=paginaWebLogicService.getPaginaWebs(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(PaginaWebDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(PaginaWebDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}