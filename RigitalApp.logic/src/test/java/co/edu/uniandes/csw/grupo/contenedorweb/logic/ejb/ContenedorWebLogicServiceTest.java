/* ========================================================================
 * Copyright 2014 grupo
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 grupo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.grupo.contenedorweb.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.grupo.contenedorweb.logic.dto.ContenedorWebPageDTO;
import co.edu.uniandes.csw.grupo.contenedorweb.logic.dto.ContenedorWebDTO;
import co.edu.uniandes.csw.grupo.contenedorweb.logic.api.IContenedorWebLogicService;
import co.edu.uniandes.csw.grupo.contenedorweb.persistence.ContenedorWebPersistence;
import co.edu.uniandes.csw.grupo.contenedorweb.persistence.api.IContenedorWebPersistence;
import co.edu.uniandes.csw.grupo.contenedorweb.persistence.entity.ContenedorWebEntity;
import co.edu.uniandes.csw.grupo.contenedorweb.persistence.converter.ContenedorWebConverter;
import static co.edu.uniandes.csw.grupo.util._TestUtil.*;

@RunWith(Arquillian.class)
public class ContenedorWebLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(ContenedorWebLogicService.class.getPackage())
				.addPackage(IContenedorWebLogicService.class.getPackage())
				.addPackage(ContenedorWebPersistence.class.getPackage())
				.addPackage(ContenedorWebEntity.class.getPackage())
				.addPackage(IContenedorWebPersistence.class.getPackage())
                .addPackage(ContenedorWebDTO.class.getPackage())
                .addPackage(ContenedorWebConverter.class.getPackage())
                .addPackage(ContenedorWebEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IContenedorWebLogicService contenedorWebLogicService;
	
	@Inject
	private IContenedorWebPersistence contenedorWebPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<ContenedorWebDTO> dtos=contenedorWebPersistence.getContenedorWebs();
		for(ContenedorWebDTO dto:dtos){
			contenedorWebPersistence.deleteContenedorWeb(dto.getId());
		}
	}

	private List<ContenedorWebDTO> data=new ArrayList<ContenedorWebDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			ContenedorWebDTO pdto=new ContenedorWebDTO();
			pdto.setPuertos(generateRandom(String.class));
			pdto.setServidor(generateRandom(String.class));
			pdto.setUrl(generateRandom(String.class));
			pdto.setFechaVencimiento(generateRandomDate());
			pdto.setName(generateRandom(String.class));
			pdto.setDescripcion(generateRandom(String.class));
			pdto.setProposito(generateRandom(String.class));
			pdto.setFechaCreacion(generateRandomDate());
			pdto.setDestruido(generateRandom(Boolean.class));
			pdto.setCaracteristicas(generateRandom(String.class));
			pdto.setEncargadoId(generateRandom(Long.class));
			pdto=contenedorWebPersistence.createContenedorWeb(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createContenedorWebTest(){
		ContenedorWebDTO ldto=new ContenedorWebDTO();
		ldto.setPuertos(generateRandom(String.class));
		ldto.setServidor(generateRandom(String.class));
		ldto.setUrl(generateRandom(String.class));
		ldto.setFechaVencimiento(generateRandomDate());
		ldto.setName(generateRandom(String.class));
		ldto.setDescripcion(generateRandom(String.class));
		ldto.setProposito(generateRandom(String.class));
		ldto.setFechaCreacion(generateRandomDate());
		ldto.setDestruido(generateRandom(Boolean.class));
		ldto.setCaracteristicas(generateRandom(String.class));
		ldto.setEncargadoId(generateRandom(Long.class));
		
		
		ContenedorWebDTO result=contenedorWebLogicService.createContenedorWeb(ldto);
		
		Assert.assertNotNull(result);
		
		ContenedorWebDTO pdto=contenedorWebPersistence.getContenedorWeb(result.getId());
		
		Assert.assertEquals(ldto.getPuertos(), pdto.getPuertos());	
		Assert.assertEquals(ldto.getServidor(), pdto.getServidor());	
		Assert.assertEquals(ldto.getUrl(), pdto.getUrl());	
		Assert.assertEquals(ldto.getFechaVencimiento(), pdto.getFechaVencimiento());	
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getDescripcion(), pdto.getDescripcion());	
		Assert.assertEquals(ldto.getProposito(), pdto.getProposito());	
		Assert.assertEquals(ldto.getFechaCreacion(), pdto.getFechaCreacion());	
		Assert.assertEquals(ldto.getDestruido(), pdto.getDestruido());	
		Assert.assertEquals(ldto.getCaracteristicas(), pdto.getCaracteristicas());	
		Assert.assertEquals(ldto.getEncargadoId(), pdto.getEncargadoId());	
	}
	
	@Test
	public void getContenedorWebsTest(){
		List<ContenedorWebDTO> list=contenedorWebLogicService.getContenedorWebs();
		Assert.assertEquals(list.size(), data.size());
        for(ContenedorWebDTO ldto:list){
        	boolean found=false;
            for(ContenedorWebDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getContenedorWebTest(){
		ContenedorWebDTO pdto=data.get(0);
		ContenedorWebDTO ldto=contenedorWebLogicService.getContenedorWeb(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getPuertos(), ldto.getPuertos());
		Assert.assertEquals(pdto.getServidor(), ldto.getServidor());
		Assert.assertEquals(pdto.getUrl(), ldto.getUrl());
		Assert.assertEquals(pdto.getFechaVencimiento(), ldto.getFechaVencimiento());
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getDescripcion(), ldto.getDescripcion());
		Assert.assertEquals(pdto.getProposito(), ldto.getProposito());
		Assert.assertEquals(pdto.getFechaCreacion(), ldto.getFechaCreacion());
		Assert.assertEquals(pdto.getDestruido(), ldto.getDestruido());
		Assert.assertEquals(pdto.getCaracteristicas(), ldto.getCaracteristicas());
		Assert.assertEquals(pdto.getEncargadoId(), ldto.getEncargadoId());
        
	}
	
	@Test
	public void deleteContenedorWebTest(){
		ContenedorWebDTO pdto=data.get(0);
		contenedorWebLogicService.deleteContenedorWeb(pdto.getId());
        ContenedorWebDTO deleted=contenedorWebPersistence.getContenedorWeb(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateContenedorWebTest(){
		ContenedorWebDTO pdto=data.get(0);
		
		ContenedorWebDTO ldto=new ContenedorWebDTO();
		ldto.setId(pdto.getId());
		ldto.setPuertos(generateRandom(String.class));
		ldto.setServidor(generateRandom(String.class));
		ldto.setUrl(generateRandom(String.class));
		ldto.setFechaVencimiento(generateRandomDate());
		ldto.setName(generateRandom(String.class));
		ldto.setDescripcion(generateRandom(String.class));
		ldto.setProposito(generateRandom(String.class));
		ldto.setFechaCreacion(generateRandomDate());
		ldto.setDestruido(generateRandom(Boolean.class));
		ldto.setCaracteristicas(generateRandom(String.class));
		ldto.setEncargadoId(generateRandom(Long.class));
		
		
		contenedorWebLogicService.updateContenedorWeb(ldto);
		
		
		ContenedorWebDTO resp=contenedorWebPersistence.getContenedorWeb(pdto.getId());
		
		Assert.assertEquals(ldto.getPuertos(), resp.getPuertos());	
		Assert.assertEquals(ldto.getServidor(), resp.getServidor());	
		Assert.assertEquals(ldto.getUrl(), resp.getUrl());	
		Assert.assertEquals(ldto.getFechaVencimiento(), resp.getFechaVencimiento());	
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getDescripcion(), resp.getDescripcion());	
		Assert.assertEquals(ldto.getProposito(), resp.getProposito());	
		Assert.assertEquals(ldto.getFechaCreacion(), resp.getFechaCreacion());	
		Assert.assertEquals(ldto.getDestruido(), resp.getDestruido());	
		Assert.assertEquals(ldto.getCaracteristicas(), resp.getCaracteristicas());	
		Assert.assertEquals(ldto.getEncargadoId(), resp.getEncargadoId());	
	}
	
	@Test
	public void getContenedorWebPaginationTest(){
		
		ContenedorWebPageDTO dto1=contenedorWebLogicService.getContenedorWebs(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		ContenedorWebPageDTO dto2=contenedorWebLogicService.getContenedorWebs(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(ContenedorWebDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(ContenedorWebDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(ContenedorWebDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(ContenedorWebDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        ContenedorWebPageDTO dto3=contenedorWebLogicService.getContenedorWebs(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(ContenedorWebDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(ContenedorWebDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}