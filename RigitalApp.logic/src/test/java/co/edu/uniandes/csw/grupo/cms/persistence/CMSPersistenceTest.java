/* ========================================================================
 * Copyright 2014 grupo
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 grupo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.grupo.cms.persistence;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;


import co.edu.uniandes.csw.grupo.cms.logic.dto.CMSPageDTO;
import org.junit.runner.RunWith;
import java.util.*;
import javax.persistence.Query;
import java.util.Collections;

import co.edu.uniandes.csw.grupo.cms.logic.dto.CMSDTO;
import co.edu.uniandes.csw.grupo.cms.persistence.api.ICMSPersistence;
import co.edu.uniandes.csw.grupo.cms.persistence.entity.CMSEntity;
import co.edu.uniandes.csw.grupo.cms.persistence.converter.CMSConverter;
import static co.edu.uniandes.csw.grupo.util._TestUtil.*;

@RunWith(Arquillian.class)
public class CMSPersistenceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(CMSPersistence.class.getPackage())
				.addPackage(CMSEntity.class.getPackage())
				.addPackage(ICMSPersistence.class.getPackage())
                .addPackage(CMSDTO.class.getPackage())
                .addPackage(CMSConverter.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private ICMSPersistence cMSPersistence;

	@PersistenceContext
	private EntityManager em;

	@Inject
	UserTransaction utx;

	@Before
	public void configTest() {
		System.out.println("em: " + em);
		try {
			utx.begin();
			clearData();
			insertData();
			utx.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				utx.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
	}

	private void clearData() {
		em.createQuery("delete from CMSEntity").executeUpdate();
	}

	private List<CMSEntity> data=new ArrayList<CMSEntity>();

	private void insertData() {
		for(int i=0;i<3;i++){
			CMSEntity entity=new CMSEntity();
			entity.setName(generateRandom(String.class));
			entity.setVersion(generateRandom(Double.class));
			em.persist(entity);
			data.add(entity);
		}
                
                    CMSEntity entity = new CMSEntity();
                    entity.setName("testEntity");
                    entity.setVersion( data.get(0).getVersion() ); // Estas dos ultimas entidades comparten la version con data[0].
                
	}
	
        
        public void getCMSsByParameterTest(){
            // hay dos con la misma version...
            String sql = "SELECT u FROM CMSENTITY u WHERE u.version like :"+data.get(0).getVersion();
            Query q1 = em.createQuery(sql);
            List<CMSDTO> l1 = CMSConverter.entity2PersistenceDTOList(q1.getResultList());
            List<CMSDTO> l2 = ( this.cMSPersistence.getCMSsByParameters( "" ,""+data.get(0).getVersion()) ).getRecords()  ;
            Assert.assertEquals(2,l1.size());
            Assert.assertEquals(l1.size(),l2.size());
            
            //Hay uno con id unico.
            CMSDTO expected = CMSConverter.entity2PersistenceDTO( em.find(CMSEntity.class,data.get(0)) );
            CMSDTO real = this.cMSPersistence.getCMSsByParameters(data.get(0).getName(),"").getRecords().get(0);
            Assert.assertEquals(expected.getId(),real.getId());
            
            // No hay ninguno 
            sql = "SELECT u FROM CMSENTITY u";
            q1 = em.createQuery(sql);
            List<CMSDTO> looked = this.cMSPersistence.getCMSsByParameters(data.get(0).getName(),"").getRecords() ;
            Assert.assertEquals(q1.getMaxResults(),looked.size());
        }
        
        
        
	@Test
	public void createCMSTest(){
		CMSDTO dto=new CMSDTO();
		dto.setName(generateRandom(String.class));
		dto.setVersion(generateRandom(Double.class));
		
		CMSDTO result=cMSPersistence.createCMS(dto);
		
		Assert.assertNotNull(result);
		
		CMSEntity entity=em.find(CMSEntity.class, result.getId());
		
		Assert.assertEquals(dto.getName(), entity.getName());
		Assert.assertEquals(dto.getVersion(), entity.getVersion());
	}
	
	@Test
	public void getCMSsTest(){
		List<CMSDTO> list=cMSPersistence.getCMSs();
		Assert.assertEquals(list.size(), data.size());
        for(CMSDTO dto:list){
        	boolean found=false;
            for(CMSEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getCMSTest(){
		CMSEntity entity=data.get(0);
		CMSDTO dto=cMSPersistence.getCMS(entity.getId());
        Assert.assertNotNull(dto);
		Assert.assertEquals(entity.getName(), dto.getName());
		Assert.assertEquals(entity.getVersion(), dto.getVersion());
        
	}
	
	@Test
	public void deleteCMSTest(){
		CMSEntity entity=data.get(0);
		cMSPersistence.deleteCMS(entity.getId());
        CMSEntity deleted=em.find(CMSEntity.class, entity.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateCMSTest(){
		CMSEntity entity=data.get(0);
		
		CMSDTO dto=new CMSDTO();
		dto.setId(entity.getId());
		dto.setName(generateRandom(String.class));
		dto.setVersion(generateRandom(Double.class));
		
		
		cMSPersistence.updateCMS(dto);
		
		
		CMSEntity resp=em.find(CMSEntity.class, entity.getId());
		
		Assert.assertEquals(dto.getName(), resp.getName());	
		Assert.assertEquals(dto.getVersion(), resp.getVersion());	
	}
	
	@Test
	public void getCMSPaginationTest(){
		//Page 1
		CMSPageDTO dto1=cMSPersistence.getCMSs(1,2);
        Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
        //Page 2
        CMSPageDTO dto2=cMSPersistence.getCMSs(2,2);
        Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
        
        for(CMSDTO dto:dto1.getRecords()){
        	boolean found=false;	
            for(CMSEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(CMSDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(CMSEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
}