/* ========================================================================
 * Copyright 2014 grupo
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 grupo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.grupo.problema.persistence;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.grupo.problema.logic.dto.ProblemaPageDTO;
import co.edu.uniandes.csw.grupo.problema.logic.dto.ProblemaDTO;
import co.edu.uniandes.csw.grupo.problema.persistence.api.IProblemaPersistence;
import co.edu.uniandes.csw.grupo.problema.persistence.entity.ProblemaEntity;
import co.edu.uniandes.csw.grupo.problema.persistence.converter.ProblemaConverter;
import static co.edu.uniandes.csw.grupo.util._TestUtil.*;

@RunWith(Arquillian.class)
public class ProblemaPersistenceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(ProblemaPersistence.class.getPackage())
				.addPackage(ProblemaEntity.class.getPackage())
				.addPackage(IProblemaPersistence.class.getPackage())
                .addPackage(ProblemaDTO.class.getPackage())
                .addPackage(ProblemaConverter.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IProblemaPersistence problemaPersistence;

	@PersistenceContext
	private EntityManager em;

	@Inject
	UserTransaction utx;

	@Before
	public void configTest() {
		System.out.println("em: " + em);
		try {
			utx.begin();
			clearData();
			insertData();
			utx.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				utx.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
	}

	private void clearData() {
		em.createQuery("delete from ProblemaEntity").executeUpdate();
	}

	private List<ProblemaEntity> data=new ArrayList<ProblemaEntity>();

	private void insertData() {
		for(int i=0;i<3;i++){
			ProblemaEntity entity=new ProblemaEntity();
			entity.setName(generateRandom(String.class));
			entity.setDescripcion(generateRandom(String.class));
			entity.setFechaDeOcurrencia(generateRandom(Date.class));
			entity.setEmpleadoId(generateRandom(Long.class));
			entity.setSqldevId(generateRandom(Long.class));
			entity.setMysqlId(generateRandom(Long.class));
			entity.setPaginawebId(generateRandom(Long.class));
			entity.setWikiId(generateRandom(Long.class));
			entity.setMaquinavirtualId(generateRandom(Long.class));
			entity.setUnidadderedId(generateRandom(Long.class));
			entity.setRepositorioId(generateRandom(Long.class));
			entity.setContenedorwebId(generateRandom(Long.class));
			entity.setSoftwaresalasId(generateRandom(Long.class));
			em.persist(entity);
			data.add(entity);
		}
	}
	
	@Test
	public void createProblemaTest(){
		ProblemaDTO dto=new ProblemaDTO();
		dto.setName(generateRandom(String.class));
		dto.setDescripcion(generateRandom(String.class));
dto.setFechaDeOcurrencia(generateRandomDate());
		dto.setEmpleadoId(generateRandom(Long.class));
		dto.setSqldevId(generateRandom(Long.class));
		dto.setMysqlId(generateRandom(Long.class));
		dto.setPaginawebId(generateRandom(Long.class));
		dto.setWikiId(generateRandom(Long.class));
		dto.setMaquinavirtualId(generateRandom(Long.class));
		dto.setUnidadderedId(generateRandom(Long.class));
		dto.setRepositorioId(generateRandom(Long.class));
		dto.setContenedorwebId(generateRandom(Long.class));
		dto.setSoftwaresalasId(generateRandom(Long.class));
		
		ProblemaDTO result=problemaPersistence.createProblema(dto);
		
		Assert.assertNotNull(result);
		
		ProblemaEntity entity=em.find(ProblemaEntity.class, result.getId());
		
		Assert.assertEquals(dto.getName(), entity.getName());
		Assert.assertEquals(dto.getDescripcion(), entity.getDescripcion());
Assert.assertEquals(parseDate(dto.getFechaDeOcurrencia()), entity.getFechaDeOcurrencia());	
		Assert.assertEquals(dto.getEmpleadoId(), entity.getEmpleadoId());
		Assert.assertEquals(dto.getSqldevId(), entity.getSqldevId());
		Assert.assertEquals(dto.getMysqlId(), entity.getMysqlId());
		Assert.assertEquals(dto.getPaginawebId(), entity.getPaginawebId());
		Assert.assertEquals(dto.getWikiId(), entity.getWikiId());
		Assert.assertEquals(dto.getMaquinavirtualId(), entity.getMaquinavirtualId());
		Assert.assertEquals(dto.getUnidadderedId(), entity.getUnidadderedId());
		Assert.assertEquals(dto.getRepositorioId(), entity.getRepositorioId());
		Assert.assertEquals(dto.getContenedorwebId(), entity.getContenedorwebId());
		Assert.assertEquals(dto.getSoftwaresalasId(), entity.getSoftwaresalasId());
	}
	
	@Test
	public void getProblemasTest(){
		List<ProblemaDTO> list=problemaPersistence.getProblemas();
		Assert.assertEquals(list.size(), data.size());
        for(ProblemaDTO dto:list){
        	boolean found=false;
            for(ProblemaEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getProblemaTest(){
		ProblemaEntity entity=data.get(0);
		ProblemaDTO dto=problemaPersistence.getProblema(entity.getId());
        Assert.assertNotNull(dto);
		Assert.assertEquals(entity.getName(), dto.getName());
		Assert.assertEquals(entity.getDescripcion(), dto.getDescripcion());
		Assert.assertEquals(entity.getEmpleadoId(), dto.getEmpleadoId());
		Assert.assertEquals(entity.getSqldevId(), dto.getSqldevId());
		Assert.assertEquals(entity.getMysqlId(), dto.getMysqlId());
		Assert.assertEquals(entity.getPaginawebId(), dto.getPaginawebId());
		Assert.assertEquals(entity.getWikiId(), dto.getWikiId());
		Assert.assertEquals(entity.getMaquinavirtualId(), dto.getMaquinavirtualId());
		Assert.assertEquals(entity.getUnidadderedId(), dto.getUnidadderedId());
		Assert.assertEquals(entity.getRepositorioId(), dto.getRepositorioId());
		Assert.assertEquals(entity.getContenedorwebId(), dto.getContenedorwebId());
		Assert.assertEquals(entity.getSoftwaresalasId(), dto.getSoftwaresalasId());
        
	}
	
	@Test
	public void deleteProblemaTest(){
		ProblemaEntity entity=data.get(0);
		problemaPersistence.deleteProblema(entity.getId());
        ProblemaEntity deleted=em.find(ProblemaEntity.class, entity.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateProblemaTest(){
		ProblemaEntity entity=data.get(0);
		
		ProblemaDTO dto=new ProblemaDTO();
		dto.setId(entity.getId());
		dto.setName(generateRandom(String.class));
		dto.setDescripcion(generateRandom(String.class));
dto.setFechaDeOcurrencia(generateRandomDate());
		dto.setEmpleadoId(generateRandom(Long.class));
		dto.setSqldevId(generateRandom(Long.class));
		dto.setMysqlId(generateRandom(Long.class));
		dto.setPaginawebId(generateRandom(Long.class));
		dto.setWikiId(generateRandom(Long.class));
		dto.setMaquinavirtualId(generateRandom(Long.class));
		dto.setUnidadderedId(generateRandom(Long.class));
		dto.setRepositorioId(generateRandom(Long.class));
		dto.setContenedorwebId(generateRandom(Long.class));
		dto.setSoftwaresalasId(generateRandom(Long.class));
		
		
		problemaPersistence.updateProblema(dto);
		
		
		ProblemaEntity resp=em.find(ProblemaEntity.class, entity.getId());
		
		Assert.assertEquals(dto.getName(), resp.getName());	
		Assert.assertEquals(dto.getDescripcion(), resp.getDescripcion());	
Assert.assertEquals(parseDate(dto.getFechaDeOcurrencia()), resp.getFechaDeOcurrencia());
		Assert.assertEquals(dto.getEmpleadoId(), resp.getEmpleadoId());	
		Assert.assertEquals(dto.getSqldevId(), resp.getSqldevId());	
		Assert.assertEquals(dto.getMysqlId(), resp.getMysqlId());	
		Assert.assertEquals(dto.getPaginawebId(), resp.getPaginawebId());	
		Assert.assertEquals(dto.getWikiId(), resp.getWikiId());	
		Assert.assertEquals(dto.getMaquinavirtualId(), resp.getMaquinavirtualId());	
		Assert.assertEquals(dto.getUnidadderedId(), resp.getUnidadderedId());	
		Assert.assertEquals(dto.getRepositorioId(), resp.getRepositorioId());	
		Assert.assertEquals(dto.getContenedorwebId(), resp.getContenedorwebId());	
		Assert.assertEquals(dto.getSoftwaresalasId(), resp.getSoftwaresalasId());	
	}
	
	@Test
	public void getProblemaPaginationTest(){
		//Page 1
		ProblemaPageDTO dto1=problemaPersistence.getProblemas(1,2);
        Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
        //Page 2
        ProblemaPageDTO dto2=problemaPersistence.getProblemas(2,2);
        Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
        
        for(ProblemaDTO dto:dto1.getRecords()){
        	boolean found=false;	
            for(ProblemaEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(ProblemaDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(ProblemaEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
}