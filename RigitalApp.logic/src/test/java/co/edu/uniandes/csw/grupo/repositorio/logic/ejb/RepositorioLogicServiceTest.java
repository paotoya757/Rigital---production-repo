/* ========================================================================
 * Copyright 2014 grupo
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 grupo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.grupo.repositorio.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.grupo.repositorio.logic.dto.RepositorioPageDTO;
import co.edu.uniandes.csw.grupo.repositorio.logic.dto.RepositorioDTO;
import co.edu.uniandes.csw.grupo.repositorio.logic.api.IRepositorioLogicService;
import co.edu.uniandes.csw.grupo.repositorio.persistence.RepositorioPersistence;
import co.edu.uniandes.csw.grupo.repositorio.persistence.api.IRepositorioPersistence;
import co.edu.uniandes.csw.grupo.repositorio.persistence.entity.RepositorioEntity;
import co.edu.uniandes.csw.grupo.repositorio.persistence.converter.RepositorioConverter;
import static co.edu.uniandes.csw.grupo.util._TestUtil.*;

@RunWith(Arquillian.class)
public class RepositorioLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(RepositorioLogicService.class.getPackage())
				.addPackage(IRepositorioLogicService.class.getPackage())
				.addPackage(RepositorioPersistence.class.getPackage())
				.addPackage(RepositorioEntity.class.getPackage())
				.addPackage(IRepositorioPersistence.class.getPackage())
                .addPackage(RepositorioDTO.class.getPackage())
                .addPackage(RepositorioConverter.class.getPackage())
                .addPackage(RepositorioEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IRepositorioLogicService repositorioLogicService;
	
	@Inject
	private IRepositorioPersistence repositorioPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<RepositorioDTO> dtos=repositorioPersistence.getRepositorios();
		for(RepositorioDTO dto:dtos){
			repositorioPersistence.deleteRepositorio(dto.getId());
		}
	}

	private List<RepositorioDTO> data=new ArrayList<RepositorioDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			RepositorioDTO pdto=new RepositorioDTO();
			pdto.setTipo(generateRandom(String.class));
			pdto.setServidor(generateRandom(String.class));
			pdto.setDestino(generateRandom(String.class));
			pdto.setTipoAcceso(generateRandom(String.class));
			pdto.setUbicacionDelServidor(generateRandom(String.class));
			pdto.setUrl(generateRandom(String.class));
			pdto.setFechaVencimiento(generateRandomDate());
			pdto.setName(generateRandom(String.class));
			pdto.setDescripcion(generateRandom(String.class));
			pdto.setProposito(generateRandom(String.class));
			pdto.setFechaCreacion(generateRandomDate());
			pdto.setDestruido(generateRandom(Boolean.class));
			pdto.setCaracteristicas(generateRandom(String.class));
			pdto.setEncargadoId(generateRandom(Long.class));
			pdto=repositorioPersistence.createRepositorio(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createRepositorioTest(){
		RepositorioDTO ldto=new RepositorioDTO();
		ldto.setTipo(generateRandom(String.class));
		ldto.setServidor(generateRandom(String.class));
		ldto.setDestino(generateRandom(String.class));
		ldto.setTipoAcceso(generateRandom(String.class));
		ldto.setUbicacionDelServidor(generateRandom(String.class));
		ldto.setUrl(generateRandom(String.class));
		ldto.setFechaVencimiento(generateRandomDate());
		ldto.setName(generateRandom(String.class));
		ldto.setDescripcion(generateRandom(String.class));
		ldto.setProposito(generateRandom(String.class));
		ldto.setFechaCreacion(generateRandomDate());
		ldto.setDestruido(generateRandom(Boolean.class));
		ldto.setCaracteristicas(generateRandom(String.class));
		ldto.setEncargadoId(generateRandom(Long.class));
		
		
		RepositorioDTO result=repositorioLogicService.createRepositorio(ldto);
		
		Assert.assertNotNull(result);
		
		RepositorioDTO pdto=repositorioPersistence.getRepositorio(result.getId());
		
		Assert.assertEquals(ldto.getTipo(), pdto.getTipo());	
		Assert.assertEquals(ldto.getServidor(), pdto.getServidor());	
		Assert.assertEquals(ldto.getDestino(), pdto.getDestino());	
		Assert.assertEquals(ldto.getTipoAcceso(), pdto.getTipoAcceso());	
		Assert.assertEquals(ldto.getUbicacionDelServidor(), pdto.getUbicacionDelServidor());	
		Assert.assertEquals(ldto.getUrl(), pdto.getUrl());	
		Assert.assertEquals(ldto.getFechaVencimiento(), pdto.getFechaVencimiento());	
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getDescripcion(), pdto.getDescripcion());	
		Assert.assertEquals(ldto.getProposito(), pdto.getProposito());	
		Assert.assertEquals(ldto.getFechaCreacion(), pdto.getFechaCreacion());	
		Assert.assertEquals(ldto.getDestruido(), pdto.getDestruido());	
		Assert.assertEquals(ldto.getCaracteristicas(), pdto.getCaracteristicas());	
		Assert.assertEquals(ldto.getEncargadoId(), pdto.getEncargadoId());	
	}
	
	@Test
	public void getRepositoriosTest(){
		List<RepositorioDTO> list=repositorioLogicService.getRepositorios();
		Assert.assertEquals(list.size(), data.size());
        for(RepositorioDTO ldto:list){
        	boolean found=false;
            for(RepositorioDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getRepositorioTest(){
		RepositorioDTO pdto=data.get(0);
		RepositorioDTO ldto=repositorioLogicService.getRepositorio(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getTipo(), ldto.getTipo());
		Assert.assertEquals(pdto.getServidor(), ldto.getServidor());
		Assert.assertEquals(pdto.getDestino(), ldto.getDestino());
		Assert.assertEquals(pdto.getTipoAcceso(), ldto.getTipoAcceso());
		Assert.assertEquals(pdto.getUbicacionDelServidor(), ldto.getUbicacionDelServidor());
		Assert.assertEquals(pdto.getUrl(), ldto.getUrl());
		Assert.assertEquals(pdto.getFechaVencimiento(), ldto.getFechaVencimiento());
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getDescripcion(), ldto.getDescripcion());
		Assert.assertEquals(pdto.getProposito(), ldto.getProposito());
		Assert.assertEquals(pdto.getFechaCreacion(), ldto.getFechaCreacion());
		Assert.assertEquals(pdto.getDestruido(), ldto.getDestruido());
		Assert.assertEquals(pdto.getCaracteristicas(), ldto.getCaracteristicas());
		Assert.assertEquals(pdto.getEncargadoId(), ldto.getEncargadoId());
        
	}
	
	@Test
	public void deleteRepositorioTest(){
		RepositorioDTO pdto=data.get(0);
		repositorioLogicService.deleteRepositorio(pdto.getId());
        RepositorioDTO deleted=repositorioPersistence.getRepositorio(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateRepositorioTest(){
		RepositorioDTO pdto=data.get(0);
		
		RepositorioDTO ldto=new RepositorioDTO();
		ldto.setId(pdto.getId());
		ldto.setTipo(generateRandom(String.class));
		ldto.setServidor(generateRandom(String.class));
		ldto.setDestino(generateRandom(String.class));
		ldto.setTipoAcceso(generateRandom(String.class));
		ldto.setUbicacionDelServidor(generateRandom(String.class));
		ldto.setUrl(generateRandom(String.class));
		ldto.setFechaVencimiento(generateRandomDate());
		ldto.setName(generateRandom(String.class));
		ldto.setDescripcion(generateRandom(String.class));
		ldto.setProposito(generateRandom(String.class));
		ldto.setFechaCreacion(generateRandomDate());
		ldto.setDestruido(generateRandom(Boolean.class));
		ldto.setCaracteristicas(generateRandom(String.class));
		ldto.setEncargadoId(generateRandom(Long.class));
		
		
		repositorioLogicService.updateRepositorio(ldto);
		
		
		RepositorioDTO resp=repositorioPersistence.getRepositorio(pdto.getId());
		
		Assert.assertEquals(ldto.getTipo(), resp.getTipo());	
		Assert.assertEquals(ldto.getServidor(), resp.getServidor());	
		Assert.assertEquals(ldto.getDestino(), resp.getDestino());	
		Assert.assertEquals(ldto.getTipoAcceso(), resp.getTipoAcceso());	
		Assert.assertEquals(ldto.getUbicacionDelServidor(), resp.getUbicacionDelServidor());	
		Assert.assertEquals(ldto.getUrl(), resp.getUrl());	
		Assert.assertEquals(ldto.getFechaVencimiento(), resp.getFechaVencimiento());	
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getDescripcion(), resp.getDescripcion());	
		Assert.assertEquals(ldto.getProposito(), resp.getProposito());	
		Assert.assertEquals(ldto.getFechaCreacion(), resp.getFechaCreacion());	
		Assert.assertEquals(ldto.getDestruido(), resp.getDestruido());	
		Assert.assertEquals(ldto.getCaracteristicas(), resp.getCaracteristicas());	
		Assert.assertEquals(ldto.getEncargadoId(), resp.getEncargadoId());	
	}
	
	@Test
	public void getRepositorioPaginationTest(){
		
		RepositorioPageDTO dto1=repositorioLogicService.getRepositorios(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		RepositorioPageDTO dto2=repositorioLogicService.getRepositorios(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(RepositorioDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(RepositorioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(RepositorioDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(RepositorioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        RepositorioPageDTO dto3=repositorioLogicService.getRepositorios(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(RepositorioDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(RepositorioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}