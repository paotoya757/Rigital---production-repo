/* ========================================================================
 * Copyright 2014 grupo
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 grupo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.grupo.encargado.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.grupo.encargado.logic.dto.EncargadoPageDTO;
import co.edu.uniandes.csw.grupo.encargado.logic.dto.EncargadoDTO;
import co.edu.uniandes.csw.grupo.encargado.logic.api.IEncargadoLogicService;
import co.edu.uniandes.csw.grupo.encargado.persistence.EncargadoPersistence;
import co.edu.uniandes.csw.grupo.encargado.persistence.api.IEncargadoPersistence;
import co.edu.uniandes.csw.grupo.encargado.persistence.entity.EncargadoEntity;
import co.edu.uniandes.csw.grupo.encargado.persistence.converter.EncargadoConverter;
import static co.edu.uniandes.csw.grupo.util._TestUtil.*;

@RunWith(Arquillian.class)
public class EncargadoLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(EncargadoLogicService.class.getPackage())
				.addPackage(IEncargadoLogicService.class.getPackage())
				.addPackage(EncargadoPersistence.class.getPackage())
				.addPackage(EncargadoEntity.class.getPackage())
				.addPackage(IEncargadoPersistence.class.getPackage())
                .addPackage(EncargadoDTO.class.getPackage())
                .addPackage(EncargadoConverter.class.getPackage())
                .addPackage(EncargadoEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IEncargadoLogicService encargadoLogicService;
	
	@Inject
	private IEncargadoPersistence encargadoPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<EncargadoDTO> dtos=encargadoPersistence.getEncargados();
		for(EncargadoDTO dto:dtos){
			encargadoPersistence.deleteEncargado(dto.getId());
		}
	}

	private List<EncargadoDTO> data=new ArrayList<EncargadoDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			EncargadoDTO pdto=new EncargadoDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setLogin(generateRandom(String.class));
			pdto=encargadoPersistence.createEncargado(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createEncargadoTest(){
		EncargadoDTO ldto=new EncargadoDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setLogin(generateRandom(String.class));
		
		
		EncargadoDTO result=encargadoLogicService.createEncargado(ldto);
		
		Assert.assertNotNull(result);
		
		EncargadoDTO pdto=encargadoPersistence.getEncargado(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getLogin(), pdto.getLogin());	
	}
	
	@Test
	public void getEncargadosTest(){
		List<EncargadoDTO> list=encargadoLogicService.getEncargados();
		Assert.assertEquals(list.size(), data.size());
        for(EncargadoDTO ldto:list){
        	boolean found=false;
            for(EncargadoDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getEncargadoTest(){
		EncargadoDTO pdto=data.get(0);
		EncargadoDTO ldto=encargadoLogicService.getEncargado(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getLogin(), ldto.getLogin());
        
	}
	
	@Test
	public void deleteEncargadoTest(){
		EncargadoDTO pdto=data.get(0);
		encargadoLogicService.deleteEncargado(pdto.getId());
        EncargadoDTO deleted=encargadoPersistence.getEncargado(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateEncargadoTest(){
		EncargadoDTO pdto=data.get(0);
		
		EncargadoDTO ldto=new EncargadoDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setLogin(generateRandom(String.class));
		
		
		encargadoLogicService.updateEncargado(ldto);
		
		
		EncargadoDTO resp=encargadoPersistence.getEncargado(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getLogin(), resp.getLogin());	
	}
	
	@Test
	public void getEncargadoPaginationTest(){
		
		EncargadoPageDTO dto1=encargadoLogicService.getEncargados(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		EncargadoPageDTO dto2=encargadoLogicService.getEncargados(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(EncargadoDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(EncargadoDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(EncargadoDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(EncargadoDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        EncargadoPageDTO dto3=encargadoLogicService.getEncargados(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(EncargadoDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(EncargadoDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}