/* ========================================================================
 * Copyright 2014 grupo
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 grupo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

<<<<<<< .mine
*/

package co.edu.uniandes.csw.grupo.sqldev.persistence;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;

import co.edu.uniandes.csw.grupo.encargado.master.persistence.entity.EncargadosQLDevEntity;
import co.edu.uniandes.csw.grupo.sqldev.logic.dto.SQLDevPageDTO;
import co.edu.uniandes.csw.grupo.sqldev.logic.dto.SQLDevDTO;
import co.edu.uniandes.csw.grupo.sqldev.persistence.api.ISQLDevPersistence;
import co.edu.uniandes.csw.grupo.sqldev.persistence.entity.SQLDevEntity;
import co.edu.uniandes.csw.grupo.sqldev.persistence.converter.SQLDevConverter;
import static co.edu.uniandes.csw.grupo.util._TestUtil.*;

@RunWith(Arquillian.class)
public class SQLDevPersistenceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(SQLDevPersistence.class.getPackage())
				.addPackage(SQLDevEntity.class.getPackage())
				.addPackage(ISQLDevPersistence.class.getPackage())
                .addPackage(SQLDevDTO.class.getPackage())
                .addPackage(SQLDevConverter.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private ISQLDevPersistence sQLDevPersistence;

	@PersistenceContext
	private EntityManager em;

	@Inject
	UserTransaction utx;

	@Before
	public void configTest() {
		System.out.println("em: " + em);
		try {
			utx.begin();
			clearData();
			insertData();
			utx.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				utx.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
	}

	private void clearData() {
		em.createQuery("delete from SQLDevEntity").executeUpdate();
	}

	private List<SQLDevEntity> data=new ArrayList<SQLDevEntity>();

	private void insertData() {
		for(int i=0;i<3;i++){
			SQLDevEntity entity=new SQLDevEntity();
			entity.setFechaVencimiento(generateRandom(Date.class));
			entity.setServidor(generateRandom(String.class));
			entity.setName(generateRandom(String.class));
			entity.setDescripcion(generateRandom(String.class));
			entity.setProposito(generateRandom(String.class));
			entity.setFechaCreacion(generateRandom(Date.class));
			entity.setDestruido(generateRandom(Boolean.class));
			entity.setCaracteristicas(generateRandom(String.class));
			entity.setPgwebId(generateRandom(Long.class));
			entity.setEncargadoId(generateRandom(Long.class));
			em.persist(entity);
			data.add(entity);
		}
	}
	
	@Test
	public void createSQLDevTest(){
		SQLDevDTO dto=new SQLDevDTO();
dto.setFechaVencimiento(generateRandomDate());
		dto.setServidor(generateRandom(String.class));
		dto.setName(generateRandom(String.class));
		dto.setDescripcion(generateRandom(String.class));
		dto.setProposito(generateRandom(String.class));
dto.setFechaCreacion(generateRandomDate());
		dto.setDestruido(generateRandom(Boolean.class));
		dto.setCaracteristicas(generateRandom(String.class));
		dto.setPgwebId(generateRandom(Long.class));
		dto.setEncargadoId(generateRandom(Long.class));
		
		SQLDevDTO result=sQLDevPersistence.createSQLDev(dto);
		
		Assert.assertNotNull(result);
		
		SQLDevEntity entity=em.find(SQLDevEntity.class, result.getId());
		
Assert.assertEquals(parseDate(dto.getFechaVencimiento()), entity.getFechaVencimiento());	
		Assert.assertEquals(dto.getServidor(), entity.getServidor());
		Assert.assertEquals(dto.getName(), entity.getName());
		Assert.assertEquals(dto.getDescripcion(), entity.getDescripcion());
		Assert.assertEquals(dto.getProposito(), entity.getProposito());
Assert.assertEquals(parseDate(dto.getFechaCreacion()), entity.getFechaCreacion());	
		Assert.assertEquals(dto.getDestruido(), entity.getDestruido());
		Assert.assertEquals(dto.getCaracteristicas(), entity.getCaracteristicas());
		Assert.assertEquals(dto.getPgwebId(), entity.getPgwebId());
		Assert.assertEquals(dto.getEncargadoId(), entity.getEncargadoId());
	}
	
	@Test
	public void getSQLDevsTest(){
		List<SQLDevDTO> list=sQLDevPersistence.getSQLDevs();
		Assert.assertEquals(list.size(), data.size());
        for(SQLDevDTO dto:list){
        	boolean found=false;
            for(SQLDevEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getSQLDevTest(){
		SQLDevEntity entity=data.get(0);
		SQLDevDTO dto=sQLDevPersistence.getSQLDev(entity.getId());
        Assert.assertNotNull(dto);
		Assert.assertEquals(entity.getServidor(), dto.getServidor());
		Assert.assertEquals(entity.getName(), dto.getName());
		Assert.assertEquals(entity.getDescripcion(), dto.getDescripcion());
		Assert.assertEquals(entity.getProposito(), dto.getProposito());
		Assert.assertEquals(entity.getDestruido(), dto.getDestruido());
		Assert.assertEquals(entity.getCaracteristicas(), dto.getCaracteristicas());
		Assert.assertEquals(entity.getPgwebId(), dto.getPgwebId());
		Assert.assertEquals(entity.getEncargadoId(), dto.getEncargadoId());
        
	}
	
	@Test
	public void deleteSQLDevTest(){
		SQLDevEntity entity=data.get(0);
		sQLDevPersistence.deleteSQLDev(entity.getId());
        SQLDevEntity deleted=em.find(SQLDevEntity.class, entity.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateSQLDevTest(){
		SQLDevEntity entity=data.get(0);
		
		SQLDevDTO dto=new SQLDevDTO();
		dto.setId(entity.getId());
dto.setFechaVencimiento(generateRandomDate());
		dto.setServidor(generateRandom(String.class));
		dto.setName(generateRandom(String.class));
		dto.setDescripcion(generateRandom(String.class));
		dto.setProposito(generateRandom(String.class));
dto.setFechaCreacion(generateRandomDate());
		dto.setDestruido(generateRandom(Boolean.class));
		dto.setCaracteristicas(generateRandom(String.class));
		dto.setPgwebId(generateRandom(Long.class));
		dto.setEncargadoId(generateRandom(Long.class));
		
		
		sQLDevPersistence.updateSQLDev(dto);
		
		
		SQLDevEntity resp=em.find(SQLDevEntity.class, entity.getId());
		
Assert.assertEquals(parseDate(dto.getFechaVencimiento()), resp.getFechaVencimiento());
		Assert.assertEquals(dto.getServidor(), resp.getServidor());	
		Assert.assertEquals(dto.getName(), resp.getName());	
		Assert.assertEquals(dto.getDescripcion(), resp.getDescripcion());	
		Assert.assertEquals(dto.getProposito(), resp.getProposito());	
Assert.assertEquals(parseDate(dto.getFechaCreacion()), resp.getFechaCreacion());
		Assert.assertEquals(dto.getDestruido(), resp.getDestruido());	
		Assert.assertEquals(dto.getCaracteristicas(), resp.getCaracteristicas());	
		Assert.assertEquals(dto.getPgwebId(), resp.getPgwebId());	
		Assert.assertEquals(dto.getEncargadoId(), resp.getEncargadoId());	
	}
	
	@Test
	public void getSQLDevPaginationTest(){
		//Page 1
		SQLDevPageDTO dto1=sQLDevPersistence.getSQLDevs(1,2);
        Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
        //Page 2
        SQLDevPageDTO dto2=sQLDevPersistence.getSQLDevs(2,2);
        Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
        
        for(SQLDevDTO dto:dto1.getRecords()){
        	boolean found=false;	
            for(SQLDevEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(SQLDevDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(SQLDevEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
        @Test
        public void desactivarRecursoTest(){
            for(int i=0;i<data.size();i++)
            {
                SQLDevEntity sql= data.get(i);
                if(sql.getDestruido())
                {
                    Long idSql= sql.getId();
                    sQLDevPersistence.desactivarRecurso(idSql);
                    Assert.assertFalse(sql.getDestruido());
                }
            }
        }
        @Test
	public void agregarEncargadoSQLDevTest1(){
		SQLDevDTO dto=new SQLDevDTO();
                dto.setFechaVencimiento(generateRandomDate());
		dto.setServidor(generateRandom(String.class));
		dto.setName(generateRandom(String.class));
		dto.setDescripcion(generateRandom(String.class));
		dto.setProposito(generateRandom(String.class));
                dto.setFechaCreacion(generateRandomDate());
		dto.setDestruido(generateRandom(Boolean.class));
		dto.setCaracteristicas(generateRandom(String.class));
		dto.setPgwebId(generateRandom(Long.class));
		dto.setEncargadoId(generateRandom(Long.class));
		
		SQLDevDTO result=sQLDevPersistence.createSQLDev(dto);
		
		Assert.assertNotNull(result);
		
		SQLDevEntity entity=em.find(SQLDevEntity.class, result.getId());
		
                Assert.assertEquals(parseDate(dto.getFechaVencimiento()), entity.getFechaVencimiento());	
		Assert.assertEquals(dto.getServidor(), entity.getServidor());
		Assert.assertEquals(dto.getName(), entity.getName());
		Assert.assertEquals(dto.getDescripcion(), entity.getDescripcion());
		Assert.assertEquals(dto.getProposito(), entity.getProposito());
                Assert.assertEquals(parseDate(dto.getFechaCreacion()), entity.getFechaCreacion());	
		Assert.assertEquals(dto.getDestruido(), entity.getDestruido());
		Assert.assertEquals(dto.getCaracteristicas(), entity.getCaracteristicas());
		Assert.assertEquals(dto.getPgwebId(), entity.getPgwebId());
		Assert.assertEquals(dto.getEncargadoId(), entity.getEncargadoId());
                
                //Probar que exista el entity Encargadowiki
                EncargadosQLDevEntity encargado1 = em.find(EncargadosQLDevEntity.class,dto.getEncargadoId());
                EncargadosQLDevEntity encargado2 = em.find(EncargadosQLDevEntity.class,dto.getId());
            
                Assert.assertNotNull(encargado1);
                Assert.assertNotNull(encargado2);
	}
        
        @Test
	public void agregarEncargadoSQLDevTest2(){
		SQLDevDTO dto=new SQLDevDTO();
                dto.setFechaVencimiento(generateRandomDate());
		dto.setServidor(generateRandom(String.class));
		dto.setName(generateRandom(String.class));
		dto.setDescripcion(generateRandom(String.class));
		dto.setProposito(generateRandom(String.class));
                dto.setFechaCreacion(generateRandomDate());
		dto.setDestruido(generateRandom(Boolean.class));
		dto.setCaracteristicas(generateRandom(String.class));
		dto.setPgwebId(generateRandom(Long.class));
		//dto.setEncargadoId(generateRandom(Long.class));
		
		SQLDevDTO result=sQLDevPersistence.createSQLDev(dto);
		
		Assert.assertNotNull(result);
		
		SQLDevEntity entity=em.find(SQLDevEntity.class, result.getId());
		
                Assert.assertEquals(parseDate(dto.getFechaVencimiento()), entity.getFechaVencimiento());	
		Assert.assertEquals(dto.getServidor(), entity.getServidor());
		Assert.assertEquals(dto.getName(), entity.getName());
		Assert.assertEquals(dto.getDescripcion(), entity.getDescripcion());
		Assert.assertEquals(dto.getProposito(), entity.getProposito());
                Assert.assertEquals(parseDate(dto.getFechaCreacion()), entity.getFechaCreacion());	
		Assert.assertEquals(dto.getDestruido(), entity.getDestruido());
		Assert.assertEquals(dto.getCaracteristicas(), entity.getCaracteristicas());
		Assert.assertEquals(dto.getPgwebId(), entity.getPgwebId());
		//Assert.assertEquals(dto.getEncargadoId(), entity.getEncargadoId());
                
                //Probar que NO exista el entity Encargadowiki
                EncargadosQLDevEntity encargado1 = em.find(EncargadosQLDevEntity.class,dto.getEncargadoId());
                EncargadosQLDevEntity encargado2 = em.find(EncargadosQLDevEntity.class,dto.getId());
            
                Assert.assertNull(encargado1);
                Assert.assertNull(encargado2);
	}
        
        @Test
        public void getSQLDevsByParametersTest(){
      //Prueba buscar un elemento que no existe.
            SQLDevPageDTO dto = sQLDevPersistence.getSQLDevsByParameters("", "", "", "", "", "", "", "", "", "", "", "0");
            Assert.assertTrue(dto.getRecords().isEmpty());
            
            //Prueba buscar un elemento existente
            SQLDevEntity entity = data.get(0);
            SQLDevEntity entity2 = data.get(1);
            SQLDevPageDTO dtoNoVacio = sQLDevPersistence.getSQLDevsByParameters(entity.getServidor(),"","","","","","","","","","","0");
            Assert.assertFalse(dtoNoVacio.getRecords().isEmpty());
            
            SQLDevPageDTO dtoNoVacio1 = sQLDevPersistence.getSQLDevsByParameters("",entity.getName(),"","","","","","","","","","0");
            Assert.assertFalse(dtoNoVacio1.getRecords().isEmpty());
            
            SQLDevPageDTO dtoNoVacio2 = sQLDevPersistence.getSQLDevsByParameters("","",entity.getDescripcion(),"","","","","","","","","0");
            Assert.assertFalse(dtoNoVacio2.getRecords().isEmpty());
            
            SQLDevPageDTO dtoNoVacio3 = sQLDevPersistence.getSQLDevsByParameters("","","",entity.getProposito(),"","","","","","","","0");
            Assert.assertFalse(dtoNoVacio3.getRecords().isEmpty());
            
            SQLDevPageDTO dtoNoVacio4 = sQLDevPersistence.getSQLDevsByParameters("","","","",entity.getCaracteristicas(),"","","","","","","0");
            Assert.assertFalse(dtoNoVacio4.getRecords().isEmpty());
            
            SQLDevPageDTO dtoNoVacio5 = sQLDevPersistence.getSQLDevsByParameters("","","","","",String.valueOf(entity.getPgwebId()),"","","","","","0");
            Assert.assertFalse(dtoNoVacio5.getRecords().isEmpty());
            
            SQLDevPageDTO dtoNoVacio6 = sQLDevPersistence.getSQLDevsByParameters("","","","","","",String.valueOf(entity.getEncargadoId()),"","","","","0");
            Assert.assertFalse(dtoNoVacio6.getRecords().isEmpty());
            
            SQLDevPageDTO dtoNoVacio8 = sQLDevPersistence.getSQLDevsByParameters("","","","","","","",entity.getFechaCreacion().getYear() + "-" + entity.getFechaCreacion().getMonth() + "-" + entity.getFechaCreacion().getDay(),entity.getFechaCreacion().getYear() + "-" + entity.getFechaCreacion().getMonth() + "-" + entity.getFechaCreacion().getDay(),"","","0");
            Assert.assertFalse(dtoNoVacio8.getRecords().isEmpty());
            
            SQLDevPageDTO dtoNoVacio9 = sQLDevPersistence.getSQLDevsByParameters("","","","","","","","","",entity.getFechaVencimiento().getYear() + "-" + entity.getFechaVencimiento().getMonth() + "-" + entity.getFechaVencimiento().getDay(),entity.getFechaVencimiento().getYear() + "-" + entity.getFechaVencimiento().getMonth() + "-" + entity.getFechaVencimiento().getDay(),"0");
            Assert.assertFalse(dtoNoVacio9.getRecords().isEmpty());
            
            entity.setDestruido(Boolean.TRUE);
            SQLDevPageDTO dtoNoVacio10 = sQLDevPersistence.getSQLDevsByParameters("","","","","","","","","","","","1");
            Assert.assertFalse(dtoNoVacio10.getRecords().isEmpty());
            entity.setDestruido(Boolean.FALSE);
            
            if(entity.getFechaCreacion().getYear() > entity2.getFechaCreacion().getYear()){
                SQLDevPageDTO dtoNoVacio11 = sQLDevPersistence.getSQLDevsByParameters("","","","","","","",entity.getFechaCreacion().getYear() + "-" + entity.getFechaCreacion().getMonth() + "-" + entity.getFechaCreacion().getDay(),entity2.getFechaCreacion().getYear() + "-" + entity2.getFechaCreacion().getMonth() + "-" + entity2.getFechaCreacion().getDay(),"","","0");
                Assert.assertFalse(dtoNoVacio11.getRecords().isEmpty());
                Assert.assertEquals(2, dtoNoVacio11.getRecords().size());
            }
            else if(entity.getFechaCreacion().getYear() == entity2.getFechaCreacion().getYear() && entity.getFechaCreacion().getMonth() > entity2.getFechaCreacion().getMonth()){
                SQLDevPageDTO dtoNoVacio11 = sQLDevPersistence.getSQLDevsByParameters("","","","","","","",entity.getFechaCreacion().getYear() + "-" + entity.getFechaCreacion().getMonth() + "-" + entity.getFechaCreacion().getDay(),entity2.getFechaCreacion().getYear() + "-" + entity2.getFechaCreacion().getMonth() + "-" + entity2.getFechaCreacion().getDay(),"","","0");
                Assert.assertFalse(dtoNoVacio11.getRecords().isEmpty());
                Assert.assertEquals(2, dtoNoVacio11.getRecords().size());
            }
            else if(entity.getFechaCreacion().getYear() == entity2.getFechaCreacion().getYear() && entity.getFechaCreacion().getMonth() == entity2.getFechaCreacion().getMonth() && entity.getFechaCreacion().getDay() > entity2.getFechaCreacion().getDay()){
                SQLDevPageDTO dtoNoVacio11 = sQLDevPersistence.getSQLDevsByParameters("","","","","","","",entity.getFechaCreacion().getYear() + "-" + entity.getFechaCreacion().getMonth() + "-" + entity.getFechaCreacion().getDay(),entity2.getFechaCreacion().getYear() + "-" + entity2.getFechaCreacion().getMonth() + "-" + entity2.getFechaCreacion().getDay(),"","","0");
                Assert.assertFalse(dtoNoVacio11.getRecords().isEmpty());
                Assert.assertEquals(2, dtoNoVacio11.getRecords().size());
            }
            else{
                SQLDevPageDTO dtoNoVacio11 = sQLDevPersistence.getSQLDevsByParameters("","","","","","","",entity2.getFechaCreacion().getYear() + "-" + entity2.getFechaCreacion().getMonth() + "-" + entity2.getFechaCreacion().getDay(),entity.getFechaCreacion().getYear() + "-" + entity.getFechaCreacion().getMonth() + "-" + entity.getFechaCreacion().getDay(),"","","0");
                Assert.assertFalse(dtoNoVacio11.getRecords().isEmpty());
                Assert.assertEquals(2, dtoNoVacio11.getRecords().size());
            }
}
}